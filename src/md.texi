@c Copyright (C) 1988-2015 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@ifset INTERNALS
@node Machine Desc
@chapter Machine Descriptions
@cindex machine descriptions

マシン記述は二つの部分からなる。機械命令のパターンを記述する
ファイル(@file{.md} ファイル) と C のマクロ定義を記述するヘッダファイル
である。

あるターゲットマシン向けの @file{.md} ファイルは、そのマシンがサポート
している各機械命令(あるいは、少なくとも、GCC が知っていたほうが良い機械命令) 
のパターンを記述する。このファイルにはコメントを書くことができる。
コメントはセミコロンから始まり行末までとなる。ただし、セミコロンが
引用符つき文字列中にある場合を除く。

C のヘッダファイルについては、次章を見ていただきたい

@menu
* Overview::            How the machine description is used.
* Patterns::            命令パターンの書き方
* Example::             @code{define_insn} の例
* RTL Template::        RTL テンプレート
* Output Template::     アセンブラコードの出力方法を指定する出力テンプレート
* Output Statement::    アセンブラコードの出力を行なう C のコード
* Constraints::         オペランド制約
* Standard Names::      コード生成で使われるパターン名
* Pattern Ordering::    パターンの順序が意味を持つ時
* Dependent Patterns::  一つのパターンが別のパターンを必要とするとき
* Jump Patterns::       ジャンプ命令のパターンに関する特別な注意
* Insn Canonicalizations::命令の正規化
* Expander Definitions::標準の演算向けの各種 RTL insn 列の生成
* Insn Splitting::    複数命令への分割
* Peephole Definitions::機種固有のピープホール最適化の定義方法
* Insn Attributes::     生成された insn の属性値を指定する
@end menu

@node Overview
@section Overview of How the Machine Description is Used

There are three main conversions that happen in the compiler:

@enumerate

@item
The front end reads the source code and builds a parse tree.

@item
The parse tree is used to generate an RTL insn list based on named
instruction patterns.

@item
The insn list is matched against the RTL templates to produce assembler
code.

@end enumerate

For the generate pass, only the names of the insns matter, from either a
named @code{define_insn} or a @code{define_expand}.  The compiler will
choose the pattern with the right name and apply the operands according
to the documentation later in this chapter, without regard for the RTL
template or operand constraints.  Note that the names the compiler looks
for are hard-coded in the compiler---it will ignore unnamed patterns and
patterns with names it doesn't know about, but if you don't provide a
named pattern it needs, it will abort.

If a @code{define_insn} is used, the template given is inserted into the
insn list.  If a @code{define_expand} is used, one of three things
happens, based on the condition logic.  The condition logic may manually
create new insns for the insn list, say via @code{emit_insn()}, and
invoke @code{DONE}.  For certain named patterns, it may invoke @code{FAIL} to tell the
compiler to use an alternate way of performing that task.  If it invokes
neither @code{DONE} nor @code{FAIL}, the template given in the pattern
is inserted, as if the @code{define_expand} were a @code{define_insn}.

Once the insn list is generated, various optimization passes convert,
replace, and rearrange the insns in the insn list.  This is where the
@code{define_split} and @code{define_peephole} patterns get used, for
example.

Finally, the insn list's RTL is matched up with the RTL templates in the
@code{define_insn} patterns, and those patterns are used to emit the
final assembly code.  For this purpose, each named @code{define_insn}
acts like it's unnamed, since the names are ignored.

@node Patterns
@section Everything about Instruction Patterns
@cindex patterns
@cindex instruction patterns

@findex define_insn
各命令パターンには、後で埋められる部分を持つ不完全な RTL 式と、各部分が
どのように埋められるかを限定するオペランド制約、それに、出力パターンまたは
アセンブラ出力を生成する C コードが含まれており、全て @code{define_insn} 式
中に記述される。

@code{define_insn} は一つの RTL 式で、四つか五つのオペランドを持つ。
それぞれのオペランドは以下の通りである。

@enumerate
@item
名前。無くても良い。名前があると、
その命令パターンが、GCC の RTL生成パスにおいてある決まった仕事を
成しうるということを意味する。RTL生成パスは一定のパターン名を知っていて、
マシン記述に定義されている名前であれば、その名前の命令パターンを
使おうとする。

名前を書くべき位置に空文字列を書くと名前がないということになる。
名無しの命令パターンは RTL コードの生成に使われることはありえない。
しかし、名無しの命令パターンを使うと、様々なより単純な insn を後で
結合させることが出来る。

つまり、RTL生成時に知られていない、あるいは使われもしない名前は
何の効果ももたらさない。名無しと全く同じである。
@c !!! 「知られていないのに使っても駄目」という意味か?

@item
@dfn{RTL テンプレート} (@pxref{RTL Template}) は、不完全な RTL 式を
要素とするベクトルであり、命令がどのように見えるかを示す。
不完全というのは、その命令のオペランドの代理である、@code{match_operand}
や @code{match_operator}、@code{match_dup} 等の式を含むからである。

RTL テンプレート・ベクトルに要素が一つしかなければ、その要素は命令パターンの
テンプレートである。ベクトルに要素が複数あれば、その命令パターンは
列挙された要素を含む @code{parallel} 式である。

@item
@cindex pattern conditions
@cindex conditions, in patterns
条件。これは文字列であり、insn 本体がパターンにマッチするかどうかを
最終的に決定するための条件を C 言語の式で表したものである。

@cindex named patterns and conditions
名前を持つパターンについては、条件は(もしあれば)、
マッチする insn 中のデータには依存せず、ターゲット機種の型のフラグに
のみ依存する。GCC は、初期化時にこの条件を調べて、どういう名前の
命令が一回毎の実行時に利用できるのかを厳密に調べる必要がある。


@findex operands
名無しのパターンについては、条件は個々の insn とのマッチングを行なう時と、
insn が、そのパターンの評価テンプレートにマッチした後にのみ
適用される。insn のオペランドは、ベクトル @code{operands} に入っている。

@item
出力テンプレート。 マッチした insn をどのようにアセンブラコードとして
出力するかを指示する文字列である。文字列中の @samp{%} は、オペランドの値を
どこに代入するかを指示する。@xref{Output Template}.

単なる置き換えでは充分でないときは、C コードの断片を指定して、計算を
行なったうえで出力させることも出来る。@xref{Output Statement}.

@item
このパターンにマッチする insn の属性値を含むベクトル。
省略可能である。 @xref{Insn Attributes}.
@end enumerate

@node Example
@section Example of @code{define_insn}
@cindex @code{define_insn} example

以下は、命令パターンの実例である。68000/68020 向けである。

@smallexample
(define_insn "tstsi"
  [(set (cc0)
        (match_operand:SI 0 "general_operand" "rm"))]
  ""
  "*
@{
  if (TARGET_68020 || ! ADDRESS_REG_P (operands[0]))
    return \"tstl %0\";
  return \"cmpl #0,%0\";
@}")
@end smallexample

これは、汎用レジスタの値に基づいて条件コードをセットする命令である。
条件の指定がないので、RTL 記述が指定された形を持つ任意の命令が、
このパターンに従って扱われる。@samp{tstsi} という名前は、
``test a @code{SImode} value''(@code{SImode} の値をテストする)という
意味で、RTL 生成パスに対して、@code{SImode} の値をテストする必要が
あるときは、それを行う命令はこのパターンを使って構成せよということを
指示する。

出力制御文字列は、C コードの断片であり、どの出力テンプレートを
返すかを、オペランドの種類とコードを生成しようとしている CPU の
特定の型に基づいて選択する。

@node RTL Template
@section RTL Template
@cindex RTL insn template
@cindex generating insns
@cindex insns, generating
@cindex recognizing insns
@cindex insns, recognizing

RTL テンプレートを使い、どの insn が特定のパターンにマッチするのか、および、
そのオペランドの見つけ方を定義する。名前付きパターンの場合は、
RTL テンプレートは、指定されたオペランドからどのように insn を構築するかに
ついても指示する。

構築するということには、指定されたオペランドをテンプレートのコピーに
代入することも含まれる。
照合することには、一致しようとしている insn のオペランドの役割を
果たす値を決定することも含まれる。
どちらの動作も、照合とオペランドの代入を指示する特別な式の型に
より制御される。

@table @code
@findex match_operand
@item (match_operand:@var{m} @var{n} @var{predicate} @var{constraint})
この式は、insn の @var{n} 番目のオペランドのプレースホルダーである。
insn の構築時に、@var{n}番目のオペランドがここに挿入される。
insn の照合時には、insn のこの位置に現れるものは何であれ、
@var{n} 番目のオペランドとして扱われる。ただし、その場合 @var{predicate} を
満たしている必要があり、さもなければこの命令パターンは全くマッチしない。

オペランド番号は、各命令パターンにおいて 0 から始まる数字に
ならなければならない。各オペランド番号について、パターンには
@code{match_operand} 式が一個だけ存在し得る。
普通は、オペランドは @code{match_operand} 式群に現れた順に
番号が付く。
@code{define_expand} の場合には、@code{match_dup} 式でのみ
使用されるオペランド番号はどれも、他のどのオペランド番号よりも
大きな値になる。

@var{predicate} は、ある C の関数名を表す文字列でり、その関数は
二つの引数、すなわち一個の式と一個のマシンモードを受け付ける。
照合が行なわれる間に、式として仮想的なオペランド、モード引数として @var{m} を
使ってその関数が呼び出される。(@var{m} が指定されない場合は、
@code{VOIDmode} が使われ、@var{predicate} は任意のモードを受け付けることに
なる。)
この関数が 0 を返した場合は、この命令パターンの照合に失敗することになる。
@var{predicate} は空の文字列であっても良い。
その場合、オペランドについては何のテストも行なわれず、この位置に
現れるものは何でも有効になる。

ほとんどの場合、@var{predicate} は @var{m} 以外のモードを受け付けない。
ただし、いつでも受け付けないわけではない。
例えば、述語(predicate) @code{address_operand} は、@var{m} を、
そのアドレスが有効なメモリ参照のモードとして使う。
多くの述語は、それらのモードが @code{VOIDmode} であっても @code{const_int}
ノードを受け付ける。

@var{constraint} は再ロードとある値に最適なレジスタクラスの選択を
制御する。これについては後で説明する (@pxref{Constraints})。

制約と述語の違いが良く判らないという人が多い。
述語は、ある与えられた insn がパターンにマッチするかどうかを
判断する手助けをする。
一方、制約は、この判断には関与しない。代わりに、
insn がパターンにマッチした場合の色々な判断を制御するのである。

@findex general_operand
CISC では、最も良く出てくる述語は、@code{"general_operand"} 
である。これは、仮想オペランドが、定数であるのか、レジスタなのか、
メモリ参照なのかを調べ、それがモード @var{m} で有効なのものかどうかを
確かめる。

@findex register_operand
レジスタでなければならないオペランドの場合は、述語としては
@code{"register_operand"} を使うべきである。再ロード過程で
@code{"general_operand"} を使っても、
任意の非レジスタオペランドをレジスタにコピーするという処理を行うので
大丈夫だが、そうすると GCC に余計な仕事をさせることになるし、
ループからの不変オペランド(例えば定数)の除去や最適なレジスタ割り付け
の妨げにもなる。
RISC の場合には、述語としては、制約が許す範囲のオブジェクトのみを
受け付けるようにするのが一般には最も効率が良い。

@findex immediate_operand
定数であるはずのオペランドの場合には、述語として @code{"immediate_operand"}
を使うか、命令パターンの付加条件が定数を要求するようにするか、あるいは両方を
行うようにする必要がある。制約を使えば同じことが出来るだろうと考えては
いけない。
制約の方が定数のみを許すようになっていても、述語がそれ以外のものを
許しているなら、実際にそのケースが発生したときに
GCC は落ちてしまうのである。

@findex match_scratch
@item (match_scratch:@var{m} @var{n} @var{constraint})
この式もオペランド番号 @var{n} のプレースホルダであり、オペランドは
@code{scratch} 式か @code{reg} 式でなければならないことを指定する。

パターン照合の際には、これは、以下の式と等価である。

@smallexample
(match_operand:@var{m} @var{n} "scratch_operand" @var{pred})
@end smallexample

しかし、RTL 生成フェーズでは、これは (@code{scratch}:@var{m}) という式を
生成する。

@code{parallel} の中の最後の幾つかの式が @code{clobber} 式であり、
その @code{clobber} 式のオペランドがハードレジスタか @code{match_scratch}
なら、結合器(combiner) は必要なときにそういうオペランドを追加したり、
削除したりすることができる。

@findex match_dup
@item (match_dup @var{n})
この式もオペランド番号 @var{n} のプレースホルダーである。
オペランドが insn の二箇所以上に現れる必要があるときに使われる。

構築の際には、@code{match_dup} はちょうど @code{match_operand}
と同様に動作する。オペランドは、構築されつつある insn に代入される。
しかし、マッチングでは、@code{match_dup} の動作は異なる。
オペランド番号 @var{n} は認識テンプレートに先に現れる @code{match_operand}
により既に決まっており、見た目が同一の式にしかマッチしないということを
想定している。

@findex match_operator
@item (match_operator:@var{m} @var{n} @var{predicate} [@var{operands}@dots{}])
このパターンは、可変な RTL 式コードの一種のプレースホルダーである。

insn 構築の際には、ある RTL 式を表す。
この RTL 式の式コードは、オペランド @var{n} から取られ、
オペランドはパターンの @var{operands} から構築される。

式と照合する際は、関数 @var{predicate} がその式についてゼロでない
値を返し、@emph{かつ} パターンの @var{operands} がその式のオペランドに
マッチしたときに、その式にマッチする。

関数 @code{commutative_operator} が以下のように定義されていると
する。演算子が RTL の交換可能な算術演算子の一つで、モードが @var{mode}
である任意の式にマッチするように定義されている。

@smallexample
int
commutative_operator (x, mode)
     rtx x;
     enum machine_mode mode;
@{
  enum rtx_code code = GET_CODE (x);
  if (GET_MODE (x) != mode)
    return 0;
  return (GET_RTX_CLASS (code) == 'c'
          || code == EQ || code == NE);
@}
@end smallexample

そうすると、以下のパターンは、二つの一般オペランドに適用される交換可能な
演算子を含む任意の RTL 式にマッチする。

@smallexample
(match_operator:SI 3 "commutative_operator"
  [(match_operand:SI 1 "general_operand" "g")
   (match_operand:SI 2 "general_operand" "g")])
@end smallexample

ここでベクトル @code{[@var{operands}@dots{}]} は、二つのパターンを
含んでいる。なぜなら、マッチすべき式は全て二つのオペランドを
含んでいるからである。

このパターンがマッチしたとき、交換可能な演算子の二つのオペランドは、
この insn のオペランド 1 とオペランド 2 として記録される。
(これは、二つの @code{match_operand} により行なわれる。)
この insn のオペランド 3 は、交換可能な式全体である。

@code{match_operator} のマシンモード @var{m} は、@code{match_operand} の
ものと同様に振る舞う。述語関数の二番目の引数として渡され、
その関数だけが、マッチすべき式がそのモードを「持っているか」どうかを
決定する責任がある。

insn を構築する際には、生成関数の第三引数が、作成されるべき式の
演算(すなわち式コード)を指定する。
この引数は一個の RTL 式であるべきで、その式コードが、
生成関数の引数 1 と 2 をオペランドとする新しい式にコピーされる。
引数 3 のサブ式は使われない。式コードだけが問題になる。

@code{match_operator} が、insn と照合されるパターンで使われているとき、
その @code{match_operator} のオペランド番号が、その insn の
実際のオペランド番号よりも大きいのが通常は最善である。
これによりレジスタ割当が改良される。レジスタ割当では、
insn のオペランド 1 と 2 を見て、レジスタの結び付けが可能かどうかを
見るからである。

@code{match_operator} に制約を指定する方法はない。
@code{match_operator} に対応する insn のオペランドは
どんな制約も持つことはない。全体として再ロードされることがないからである。
だが、その @var{operands} の一部が @code{match_operand} パターンに
より照合が行なわれると、その一部はそれ自身の制約があって良い。

@findex match_op_dup
@item (match_op_dup:@var{m} @var{n}[@var{operands}@dots{}])
@code{match_dup} に似ているが、オペランドではなく演算子に適用される。
insn を構築するときは、オペランド番号 @var{n} がここに代入される。
しかし、マッチングの際には @code{match_op_dup} の動作は異なる。
オペランド番号 @var{n} は認識テンプレートに先に現れる @code{match_operator}
により既に決まっており、見た目が同一の式にしかマッチしないということを
想定している。

@findex match_parallel
@item (match_parallel @var{n} @var{predicate} [@var{subpat}@dots{}])
このパターンは、可変数要素の @code{parallel} 式一個からなる insn の
プレースホルダーである。
この式は、insn パターンの最上位レベルにのみ現れるべきである。

insn を構築する際には、オペランド番号 @var{n} がこの点で置き換えられる。
insn との照合の際には、insn 本体が @code{parallel} 式であり、この
@code{parallel} 式が、
少なくとも @code{match_parallel} 中の @var{subpat} 式の insn ベクトルの
要素数と同じ要素数を持つのであれば、各 @var{subpat} が @code{parallel} の
対応する要素に一致し、@emph{かつ}、関数 @var{predicate} が insn の本体で
ある @code{parallel} に対してゼロでない値を返すなら、一致が起きる。
@code{match_parallel} に列挙されたもの以外の @code{parallel} の要素を
確認するのは述語の役割である。@refill

@code{match_parallel} の代表的な使い方は、ロードマルチプル式と
ストアマルチプル式にマッチさせることである。
例えば、

@smallexample
(define_insn ""
  [(match_parallel 0 "load_multiple_operation"
     [(set (match_operand:SI 1 "gpc_reg_operand" "=r")
           (match_operand:SI 2 "memory_operand" "m"))
      (use (reg:SI 179))
      (clobber (reg:SI 179))])]
  ""
  "loadm 0,0,%1,%2")
@end smallexample

この例は、@file{a29k.md} から取ったものである。
関数 @code{load_multiple_operations} は、@file{a29k.c} で
定義されており、@code{parallel} 中の後続の要素が、このパターンの
中の@code{set} と同じであるかどうかを検査している。
その要素が、後続のレジスタとメモリ位置を参照している場合を除く。

このパターンにマッチする insn は以下のような形式である。

@smallexample
(parallel
 [(set (reg:SI 20) (mem:SI (reg:SI 100)))
  (use (reg:SI 179))
  (clobber (reg:SI 179))
  (set (reg:SI 21)
       (mem:SI (plus:SI (reg:SI 100)
                        (const_int 4))))
  (set (reg:SI 22)
       (mem:SI (plus:SI (reg:SI 100)
                        (const_int 8))))])
@end smallexample

@findex match_par_dup
@item (match_par_dup @var{n} [@var{subpat}@dots{}])
@code{match_op_dup} と同様だが、@code{match_operator} ではなく
@code{match_parallel} 用である。

@findex match_insn
@item (match_insn @var{predicate})
完全な insn にマッチする。他の @code{match_*} 認識器とは異なり、
@code{match_insn} はオペランド番号を取らない。

@code{match_insn} のマシンモード @var{m} は、@code{match_operand}
と同様の働きをする。述語関数の第二引数として渡され、
マッチした式のモードがそのモードになっているかどうかを決定する
責任はその関数にだけある。

@findex match_insn2
@item (match_insn2 @var{n} @var{predicate})
完全な insn にマッチする。

@code{match_insn2} のマシンモード @var{m} は、@code{match_operand}
と同様の働きをする。述語関数の第二引数として渡され、
マッチした式のモードがそのモードになっているかどうかを決定する
責任はその関数にだけある。

@findex address
@item (address (match_operand:@var{m} @var{n} "address_operand" ""))
この複雑な式は、「ロードアドレス」命令中のオペランド番号 @var{n} の
プレースホルダーである。
このオペランドは普通はメモリ位置を指定するが、実際のオペランド値
として使われるのはその位置のアドレスであり、その位置の内容ではない。

@code{address} 式は RTL コードには決して現れず、マシン記述でのみ
使われる。そして、オペランド制約の機能を使わないマシン記述でしか
使われることがない。
オペランド制約が使われる場合は、制約の文字 @samp{p} がこの目的を
果たす。

@var{m} は、@emph{アドレスとなるメモリ位置}のマシンモードであり、
アドレス自身のマシンモードではない。
このモードは、ある与えられたターゲットマシン上では常に同じなので
(@code{Pmode} で、これは普通は @code{SImode} である)、
それをわざわざ明記する意味はない。
つまり、@code{address} 式にはマシンモードは書かないのである。
いつの日か、異なる種類のオブジェクトのアドレスが異なって見えたり、
(PDP-10 のように)使い方が異なっていたりするマシンがサポートされたら、
異なる形式はおそらく異なるマシンモードを必要とし、そのモードを
@code{address} 式に書くことになるだろう。
@end table

@node Output Template
@section Output Templates and Operand Substitution
@cindex output templates
@cindex operand substitution

@dfn{出力テンプレート}は文字列であり、
ある命令パターンに対するアセンブラコードを
どのように出力するかを指定する。
テンプレートのほとんどの部分は、固定文字列であり、そのまま出力される。
文字 @samp{%} を使って、オペランドが代入される位置を指定する。
また、アセンブラに変種があるために異なる構文を必要とする場所を
特定するのにも使われる。

一番単純な場合では、@samp{%} の数字 @var{n} が続いた場合は、
文字列のその部分にオペランド @var{n} を出力することを示す。

@samp{%} の直後に英字1文字と数字1文字が続くと、オペランドの出力形式を
別のものに変えることを意味する。
英字としては四つの文字が標準で組み込み済の意味を持っており、
以下で解説する。マシン記述マクロ @code{PRINT_OPERAND} を
使って、標準ではない意味を持つ文字を追加定義することができる。

@samp{%c@var{digit}} を使うと、
通常は即値オペランドである事を示す構文を使わなくても、
定数値であるオペランドを置き換えることができる。

@samp{%n@var{digit}} は、表示前に定数値が否定を取られることを
除けば @samp{%c@var{digit}} に同じである。

@samp{%a@var{digit}} を使ってそれがあたかもメモリ参照であるかのように、
あるオペランドをアドレスとして扱われる実際のオペランドと置き換えることが
できる。これは、「ロードアドレス」命令を出力する際に役に立つ。
そういう命令のアセンブラ構文では、オペランドをあたかもメモリ参照で
あるかのように書くことを要求することが多いからである。

@samp{%l@var{digit}} は、ジャンプ命令に @code{label_ref} を代入するのに
使われる。

@samp{%=} は、各命令に対し、コンパイルの全過程で一意的な番号を出力する。
これは、複数のアセンブラ命令を生成する一個のテンプレート中で
二回以上参照されるローカルラベルを作るときに便利である。

@samp{%} の後ろに区切り文字が続くと、オペランドを使わない置き換えである
ことを指定する。標準的な使い方は一個だけである。
@samp{%%} とするとアセンブラコードに @samp{%} を出力する。
その他の非標準的な場合は、マクロ @code{PRINT_OPERAND} で定義することが
できる。
また、どの区切り文字が有効かをマクロ @code{PRINT_OPERAND_PUNCT_VALID_P} で
定義しなければならない。

@cindex \
@cindex backslash
テンプレートは複数のアセンブラ命令を生成して良い。
その場合には、各命令を @samp{\;} で区切って書く。

@cindex matching operands
RTL にオペランドが二つあり、制約によりその二つが互いに一致することが
要求されている場合には、出力テンプレートでは、数字の小さい方のオペランド
しか参照してはならない。一致したオペランドはいつも同じではなく、
コンパイラの残りの部分で、数字の小さい方のオペランドに出力する
適切な RTL 式を置くように調整する。

@samp{%} の後ろに標準でない英文字や区切り文字を置く使い方の一つに、
同一のマシンに対する異なるアセンブラ言語を区別することがある。
例えば、68000 には Motorola 形式と MIT 形式がある。
Motorola 形式では、ほとんどのオペコード名にピリオドを使うのに対し、
MIT 形式では使わない。例えば、MIT 形式で @samp{movel} と書くオペコードは、
Motorola 形式では @samp{move.l} となる。
両方の出力形式に対して同じパターンファイルを使用するが、
Motorola 形式でピリオドが必要な場所には文字シーケンス @samp{%.} を
使うようにする。
マクロ @code{PRINT_OPERAND} は、Motorola 形式では、ピリオドを
出力するシーケンスを定義し、MIT 形式向けには何もしないマクロとして
定義する。

@cindex @code{#} in template
特別な場合として、テンプレートが一個の文字 @code{#} から成っていると
コンパイラに対し、最初に insn を分割し、次にその結果の命令を別々に
出力することを指示する。
これは、出力テンプレートの冗長性を消去するのに役立つ。
複数のアセンブラ命令を出力する必要がある @code{define_insn} があり、
マッチする @code{define_split} が既に定義されているなら、
出力テンプレートとして単に @code{#} を使うことができ、
複数のアセンブラ命令を出力する出力テンプレートを書く必要はない。

マクロ @code{ASSEMBLER_DIALECT} が定義されていれば、
テンプレートで @samp{@{option0|option1|option2@}}という形式の
構文を使うことができる。
アセンブラ言語の文法の複数の方言を記述する。
@xref{Instruction Output}.

@node Output Statement, Constraints, Output Template, Machine Desc
@section C Statements for Assembler Output
@cindex output statements
@cindex C statements for assembler output
@cindex generating assembler output

全てのケースに対して、正確で効率の良いアセンブラコードを生成するのが
難しいということが良くある。
例えば、オペコードはオペランドの種類に依存することがある。
あるいは、オペランドの組合せが悪いと余分の機械命令が必要なこともある。

そういうときは、出力制御文字列を @samp{@@} で開始すると、
一行に一個ずつ置いたテンプレートの列とすることが出来る。
(空行や行頭の空白、タブは無視される。)
このテンプレート群は、命令パターン中の制約の選択肢に対応する
(@pxref{Multi-Alternative})。
例えば、ターゲットの機種が、アドレスを二つ取る加算命令として、
レジスタに加算する命令 @samp{addr} とレジスタの値をメモリ中に加算する命令
@samp{addm} の二つの命令を持っている場合、以下のようにパターンを書くこと
ができる。

@smallexample
(define_insn "addsi3"
  [(set (match_operand:SI 0 "general_operand" "=r,m")
        (plus:SI (match_operand:SI 1 "general_operand" "0,0")
                 (match_operand:SI 2 "general_operand" "g,r")))]
  ""
  "@@
   addr %2,%0
   addm %2,%0")
@end smallexample

@cindex @code{*} in template
@cindex asterisk in template
出力制御文字列が @samp{*} で始まっている場合は、出力テンプレートそのもの
ではなくて、テンプレートを生成する C のコード断片であることを示す。
この C コード断片は、@code{return} 文を使って、テンプレート文字列を
返す必要がある。このテンプレートは C の文字列リテラルを使う場合が多い。
文字列リテラルの場合は区切り記号として二重引用符が必要である。
テンプレート文字列に二重引用符を含めるには、@samp{\} でエスケープする
必要がある。

オペランドは、@code{operands} という、@code{rtx []} 型の配列に
収められている。

即値オペランドが、ある一定の範囲内におさまるかどうかによって、
異なるアセンブラコードの生成方法を選択するのは非常に良く
行なわれる。
しかし、その場合には注意が必要である。
とうのは、@code{INTVAL} の結果はホストマシンでの整数になるからである。
ホストマシンの @code{int} のビット数が、ターゲットマシンの定数で
使われるモードのビット数より大きければ、@code{INTVAL} から得られるビットの
いくつかは余計なものである。
正しい結果を得るためには、この余分なビットによる値を注意深く
取り除かなければならない。

@findex output_asm_insn
サブルーチン @code{output_asm_insn} を使って、
あるアセンブラ命令を出力し、その後出力を続けたり、さらに計算を行なうことが
可能である。
この関数は引数を二つ取る。テンプレート文字列とオペランドのベクトル
である。ベクトルは @code{operands} であっても良いし、
あるいは読者がローカルに宣言し、自分で初期化した、別の @code{rtx} の
配列でも良い。

@findex which_alternative
ある insn のパターンで、制約に複数の選択肢がある場合は、
アセンブラコードの見かけはどの選択肢にマッチしたかでほとんど決まる
ことが多い。その場合、C のコードでは、変数 @code{which_alternative} を
テストすることができる。この変数は、実際に条件にあった
選択肢の順番を表す数(先頭の選択肢は 0で、二番目は 1、等々)である。

例えば、ゼロを格納する命令には、二つのオペコードがあるとしよう。
レジスタの場合には@samp{clrreg}、メモリ位置の場合は @samp{clrmem} である。
以下に、あるパターンでどのように @code{which_alternative} を
使って、オペコードを選択するかを示す。

@smallexample
(define_insn ""
  [(set (match_operand:SI 0 "general_operand" "=r,m")
        (const_int 0))]
  ""
  "*
  return (which_alternative == 0
          ? \"clrreg %0\" : \"clrmem %0\");
  ")
@end smallexample

この例は、生成すべきアセンブラコードが選択肢@emph{だけで}決まるなら、
出力制御文字を @samp{@@} で始めるようにすれば、以下のように指定する
こともできる。

@smallexample
@group
(define_insn ""
  [(set (match_operand:SI 0 "general_operand" "=r,m")
        (const_int 0))]
  ""
  "@@
   clrreg %0
   clrmem %0")
@end group
@end smallexample

@c Most of this node appears by itself (in a different place) even
@c when the INTERNALS flag is clear.  Passages that require the internals
@c manual's context are conditionalized to appear only in the internals manual.
@ifset INTERNALS
@node Constraints
@section Operand Constraints
@cindex operand constraints
@cindex constraints

ある命令パターンにおいて、@code{match_operand} のそれぞれに、
許されるオペランドの型についての制約を指定することができる。

@end ifset
@ifclear INTERNALS
@node Constraints
@section Constraints for @code{asm} Operands
@cindex operand constraints, @code{asm}
@cindex constraints, @code{asm}
@cindex @code{asm} constraints

以下に、@code{asm} オペランドでどんな制約文字が使用可能かの詳細を
示す。

@code{asm} operands.
@end ifclear
制約により、次のような指定が可能である。
あるオペランドがレジスタに置かれているかどうか、置かれているなら
どの種類のレジスタか。
オペランドとしてメモリ参照が可能かどうか、可能ならどの種類の
アドレスか。オペランドとして即値が可能かどうか、可能ならどういう
値が可能か。
制約は二つのオペランドが一致することを要求することもできる。

@ifset INTERNALS
@menu
* Simple Constraints::  Basic use of constraints.
* Multi-Alternative::   When an insn has two alternative constraint-patterns.
* Class Preferences::   Constraints guide which hard register to put things in.
* Modifiers::           More precise control over effects of constraints.
* Machine Constraints:: Existing constraints for some particular machines.
@end menu
@end ifset

@ifclear INTERNALS
@menu
* Simple Constraints::  Basic use of constraints.
* Multi-Alternative::   When an insn has two alternative constraint-patterns.
* Modifiers::           More precise control over effects of constraints.
* Machine Constraints:: Special constraints for some particular machines.
@end menu
@end ifclear

@node Simple Constraints
@subsection Simple Constraints
@cindex simple constraints

最も単純な種類の制約は全部が英文字からなる文字列である。
その一つ一つの文字が、許されるオペランドの一つの種類を記述する。
以下に許される英文字を示す。

@table @asis
@cindex @samp{m} in constraint
@cindex memory references in constraints
@item @samp{m}
メモリオペランドを指定する。その機種が一般にサポートしている
アドレスならどれでも良い。

@cindex offsettable address
@cindex @samp{o} in constraint
@item @samp{o}
メモリオペランドを指定する。ただし、許されるアドレスは「オフセット指定可能な」
アドレスだけである。
つまり、そのアドレスに小さな整数(実際には、マシンモードにより決まる、
バイト数で表したオペランドの幅に収まる数)を加算した結果も
また有効なメモリアドレスとなる。

@cindex autoincrement/decrement addressing
例えば、アドレスが定数であれば、それはオフセット指定可能である。
一個のレジスタと一個の定数(ちょっと大きめの定数もその機種で
サポートされている範囲のアドレスのオフセットになっている限り)
の和もオフセット指定可能である。
しかし、自動インクリメント、自動デクリメントのアドレスは
オフセット指定可能でない。
もっと複雑な間接／インデックス修飾アドレスがオフセット指定可能か
どうかは、その機種がサポートする他のアドレッシングモードに
依存する。

別のオペランドにマッチ可能な出力オペランドにおいては、
制約文字 @samp{o}は、@samp{<}(ターゲット機種に事前デクリメントアドレッシング
があれば)と@samp{>}(ターゲット機種に事前インクリメントアドレッシングが
あれば)の両方を伴う場合にのみ有効である。

@cindex @samp{V} in constraint
@item @samp{V}
オフセット指定可能でないメモリオペランドを指定する。
言い換えると、制約 @samp{m} には収まるが、@samp{o} には収まらないものは
何でもここに入る。

@cindex @samp{<} in constraint
@item @samp{<}
自動デクリメントのアドレスのメモリオペランドを指定する。
プリデクリメントでもポストデクリメントのどちらでも良い。

@cindex @samp{>} in constraint
@item @samp{>}
自動インクリメントのアドレスのメモリオペランドを指定する。
プリインクリメントでもポストインクリメントのどちらでも良い。

@cindex @samp{r} in constraint
@cindex registers in constraints
@item @samp{r}
レジスタオペランドが許される。ただし、レジスタは汎用レジスタである。

@cindex @samp{d} in constraint
@item @samp{d}, @samp{a}, @samp{f}, @dots{}
他の文字は、機種依存の方法で、特定のレジスタクラスを表すように
定義することができる。
68000/68020 では、@samp{d}、@samp{a}、@samp{f} が
定義されており、それぞれ、データレジスタ、アドレスレジスタ、
浮動小数点レジスタを表す。

@cindex constants in constraints
@cindex @samp{i} in constraint
@item @samp{i}
整数の即値オペランド(定数値のもの)が許される。
これには、値がアセンブル時にならないとわからないシンボリックな定数も
含まれる。

@cindex @samp{n} in constraint
@item @samp{n}
既知の数値を持つ整数即値のオペランドが許される。
多くのシステムでは、語長よりも小さいオペランドにはアセンブル時の定数は
使えない。そのようなオペランドの制約には @samp{i} ではなく @samp{n} を
使うべきである。

@cindex @samp{I} in constraint
@item @samp{I}, @samp{J}, @samp{K}, @dots{} @samp{P}
他の、@samp{I} と @samp{P} の間にある文字は、機種依存の方法で、
指定された範囲の明示された整数値を持つ整数の即値オペランドを許すように
定義することができる。
例えば、68000 では、@samp{I} は、1 〜 8 の範囲の値を表すと
定義されている。これは、シフト命令で許されているシフト幅の範囲である。

@cindex @samp{E} in constraint
@item @samp{E}
浮動小数点の即値オペランド(式コードは @code{const_double})が
許される。ただし、ターゲットの浮動小数点形式がホストマシン(コンパイラが
動作するマシン)のものと同じ場合に限られる。

@cindex @samp{F} in constraint
@item @samp{F}
浮動小数点の即値オペランド(式コードは @code{const_double})が
許される。

@cindex @samp{G} in constraint
@cindex @samp{H} in constraint
@item @samp{G}, @samp{H}
@samp{G} と @samp{H} は、機種依存の方法で、特定の範囲の値の
浮動小数点即値オペランドを許すように定義することができる。

@cindex @samp{s} in constraint
@item @samp{s}
値が明示的な整数ではない、整数即値オペランドが許される。

これは奇異に聞こえるかもしれない。
もし、ある insn がコンパイル時には決まっていない値をもつ定数オペランドを
許すなら、当然、どんな既知の値でも許さなければならないはずだ。
どうして、@samp{i} の代わりに @samp{s} を使うのか?
その方が、良いコードが生成されることがあるからなのだ。

例えば、68000 の全ワードの命令では即値オペランドを使うことができる。
しかし、即値の範囲が -128 と 127 の間にあるなら、その値をレジスタに
ロードして、そのレジスタを使った方が良いコードになるのである。
これは、レジスタへのロードが @samp{moveq} 命令で行なえるからである。
我々はこれが起きるように、文字 @samp{K} が「-128 と 127 の範囲の
外側の整数」という意味を持つように定義し、オペランドの制約に
@samp{Ks} と指定している。

@cindex @samp{g} in constraint
@item @samp{g}
任意のレジスタ、メモリ、整数の即値のオペランドが許される。
ただし、汎用レジスタでないレジスタは除く。

@cindex @samp{X} in constraint
@item @samp{X}
@ifset INTERNALS
どんなオペランドでも、たとえ @code{general_operand} を満たさないもので
あっても許される。
これは、通常、特定の選択肢が実際にはスクラッチレジスタを必要としないときに、
@code{match_scratch} の制約で使われる。
@end ifset
@ifclear INTERNALS
どんなオペランドでも許される。
@end ifclear

@cindex @samp{0} in constraint
@cindex digits in constraint
@item @samp{0}, @samp{1}, @samp{2}, @dots{} @samp{9}
指定したオペランド番号にマッチするオペランドが許される。
数字を同じ選択肢の中で英文字と組み合わせて使うなら、数字は
最後に書くこと。

@cindex matching constraint
@cindex constraint, matching
これは、@dfn{照合制約}と呼ばれており、それが実際に意味することは、
アセンブラには二つの役割を果たす一個のオペランドしかないということである。
@ifset INTERNALS
この二つの役割は RTL insn で別のものと考えられている。
例えば、add insn は RTL には、二つの入力オペランドと一つのオペランドを
持っているが、多くの CISC
@end ifset
@ifclear INTERNALS
@code{asm} は二つの役割を区別する。例えば、add 命令は二つの
入力オペランドと出力オペランドを使うが、多くの CISC
@end ifclear
マシンでは、add 命令にはオペランドが二つしかなく、その一つは
入力と出力兼用オペランドである。

@smallexample
addl #35,r12
@end smallexample

照合制約は以下の状況で使われる。
もっと正確に言えば、マッチする二つのオペランドのうち、一つは入力専用で、
もう一つは出力専用でなければならない。さらに、数字は制約で使われている
オペランド数より小さな数でなければならない。

@ifset INTERNALS
ある特定の場合にマッチするオペランドは普通それらが見かけが同じである
RTL 式になっているということを意味する。しかし、2,3の特別な場合には
特定の種類の違いは許される。例えば、入力オペランドとしての @code{*x} は
出力オペランドとしての @code{*x++} にマッチする。
このような場合に正しい結果を得るには、出力テンプレートでは
オペランドを出力するさいに常に出力オペランドの番号を使う必要がある。
@end ifset

@cindex load address instruction
@cindex push address instruction
@cindex address constraints
@cindex @samp{p} in constraint
@item @samp{p}
有効なメモリアドレスであるオペランドが許される。
これは、「ロード・アドレス」命令と「プッシュ・アドレス」命令向けである。

@findex address_operand
制約の中の @samp{p} には、@code{match_operand} の述語のように、
@code{address_operand} が付随しなければならない。
この述語は、@code{match_operand} で指定されたモードを、
アドレスが有効であるメモリ参照のモードとして解釈する。

@cindex extensible constraints
@cindex @samp{Q}, in constraint
@item @samp{Q}, @samp{R}, @samp{S}, @dots{} @samp{U}
@samp{Q} から @samp{U} の範囲の文字は、機種依存の形式で
定義して、任意のオペランド型を表すのに使える。
@ifset INTERNALS
マシン記述マクロ @code{EXTRA_CONSTRAINT} には、一番目の引数として
そのオペランドが、二番目の引数として制約文字が渡される。

これの典型的な使い方は、他の insn のオペランドに影響する
メモリ参照の一定の型を区別することである。

これらの制約文字は、レジスタ選択(@code{reg})を受け付けるようには
定義しないこと。再ロードパスが想定していないことであり、正しく扱え
ないだろう。
@end ifset
@end table

@ifset INTERNALS
アセンブラコードを正しいものにするために、各オペランドはその制約を
満たさなければならない。
しかし、制約を満たさなくても、そのパターンがある insn に適用されるのを
妨げるものではない。
代わりに、コンパイラがコードを修正して、制約が満足されるようにする。
通常これはオペランドをレジスタにコピーすることにより行なわれる。

このため、以下の二つの命令パターンを比べてみよう。

@smallexample
(define_insn ""
  [(set (match_operand:SI 0 "general_operand" "=r")
        (plus:SI (match_dup 0)
                 (match_operand:SI 1 "general_operand" "r")))]
  ""
  "@dots{}")
@end smallexample

@noindent
これにはオペランドが二つあり、そのうちの一つは二箇所に現れなければならない。
そして、

@smallexample
(define_insn ""
  [(set (match_operand:SI 0 "general_operand" "=r")
        (plus:SI (match_operand:SI 1 "general_operand" "0")
                 (match_operand:SI 2 "general_operand" "r")))]
  ""
  "@dots{}")
@end smallexample

@noindent
こちらは、オペランドが三つあり、そのうちの二つは制約により等しいことが
要求される。以下の形の insn を考えてみると、

@smallexample
(insn @var{n} @var{prev} @var{next}
  (set (reg:SI 3)
       (plus:SI (reg:SI 6) (reg:SI 109)))
  @dots{})
@end smallexample

@noindent
最初のパターンは全く適合しない。この insn には、正しい場所に二つの
同じ部分式がないからである。
最初のパターンは、「加算命令には見えないので、他のパターンを試してね。」
と言うだろう。
一方、二番目のパターンは、「うん、これは加算命令だ。だけどちょっと
間違ってるな。」と言うだろう。
コンパイラの再ロードパスに対して insn を追加で生成させ、制約が
満たされるようにすることを指示する。
その結果は以下のようになるだろう。

@smallexample
(insn @var{n2} @var{prev} @var{n}
  (set (reg:SI 3) (reg:SI 6))
  @dots{})

(insn @var{n} @var{n2} @var{next}
  (set (reg:SI 3)
       (plus:SI (reg:SI 3) (reg:SI 109)))
  @dots{})
@end smallexample

各パターンの各オペランドが、それぞれのオペランド向けに存在
しうる、どんな RTL 式も扱えるような制約を持つことを保証するのは
読者の責任である。
(複数の選択肢が使われている場合は、各パターンは、オペランド式の
可能な組合せ毎に、その組合せを扱うことが出来る選択肢を少なくとも
一つ持たなければならない。)
その制約は可能なオペランドをなんでも許す必要はない。なんでも許すのであれば
それは制約ではない。だが、その制約は少なくとも、それに適するような
何らかの可能なオペランドを再ロードする方法を指し示す必要がある。

@itemize @bullet
@item
もし制約が、述語が許すオペランドなら何でも受け付けるなら何の問題も
ない。このオペランドは再ロードを全く必要としない。

例えば、レジスタ以外のあらゆるものを許す制約を持つオペランドは、
その述語がレジスタを拒絶するなら安全である。

定数値だけを受け付ける述語を持つオペランドは、その制約に文字 @samp{i} が
入っていれば安全である。
任意の可能な定数値を受け付けたなら、@samp{i} がするであろう以上のことは
なにもしない。もし述語がもっと選択的なら、制約もまたもっと
選択的にして良い。

@item
任意のオペランド式は、レジスタにコピーすることにより再ロード可能である。
そのため、オペランドの制約がどの種類かのレジスタを許していれば、
間違いなく安全である。全てのクラスのレジスタを許す必要はない。
コンパイラは、命令を正しいものにするために、
あるレジスタを別の適切なクラスのレジスタにコピーする方法を知っている。

@cindex nonoffsettable memory reference
@cindex memory reference, nonoffsettable
@item
オフセット可能でないメモリ参照は、そのアドレスをレジスタにコピーすることで
再ロード可能である。そのため、制約が文字 @samp{o} を使っていれば、
全てのメモリ参照の面倒を見てくれる。

@item
定数オペランドは、それを事前に初期化されたデータとして保持するために、
メモリスペースを獲得することで、再ロード可能である。
そうすると、定数の代わりにメモリ参照が使える。
そのため、制約が文字 @samp{o} や @samp{m} を使っていれば、
定数オペランドは問題ではない。

@item
制約が一個の定数とある insn で使われている一個の疑似レジスタを
許しているものとする。
このとき、その疑似レジスタがハードレジスタに割り当てられておらず、
定数に等価であるなら、そのレジスタは定数に置き換えられる。
述語が一個の定数と何らかの理由により再認識される insn を認めていなければ、
GNU CC が異常終了する。
すなわち、述語は、制約により許されるオブジェクトはどんなものであれ
常に認識しなければならない。

@end itemize

オペランドの述語はレジスタを認識できるが、制約の方はレジスタを許さない場合は
コンパイラが落ちる可能性がある。
このオペランドがレジスタになったとき、再ロードパスがうまくいかなくなる。
レジスタを一時的にメモリにコピーする方法が分からないためである。

述語が単項演算子を受け付けるなら、制約はそのオペランドに適用される。
例えば、ISA レベル 3 の MIPS プロセッサは、@code{SImode} の二つの
レジスタを加算して、@code{DImode} の結果を生成する命令をサポートしているが、
これはレジスタが正しく符号拡張される場合だけである。
入力オペランドに対するこの述語は、ある @code{SImode} のレジスタの
@code{sign_extend} を受け付ける。@code{sign_extend} の
オペランドとして必要なレジスタのタイプを示すように制約を書くこと。
@end ifset

@node Multi-Alternative
@subsection Multiple Alternative Constraints
@cindex multiple alternative constraints

一個の命令が可能なオペランドの複数の選択肢の組を持つことが時々ある。
例えば、68000 では論理和命令はレジスタか即値をメモリと組み合わせることが
できる。あるいは、任意の種類のオペランドをレジスタと組み合わせることができる。
だが、一つのメモリ位置をもう一つのメモリ位置と組み合わせることはできない。

このような制約は複数の選択肢として表現される。ある選択肢は、
各オペランド毎に、文字の連なりで記述される。あるオペランドに対する
制約は全体としては、最初の選択肢に現れるこのオペランド用の文字、カンマ、
第二の選択肢に現れるこのオペランド用の文字、カンマ、... が最後の選択肢
まで続く。
@ifset INTERNALS
これが、68000 の全ワードの論理和命令ではどのようになされているかを
以下に示す。

@smallexample
(define_insn "iorsi3"
  [(set (match_operand:SI 0 "general_operand" "=m,d")
        (ior:SI (match_operand:SI 1 "general_operand" "%0,0")
                (match_operand:SI 2 "general_operand" "dKs,dmKs")))]
  @dots{})
@end smallexample

最初の選択肢は、オペランド0には @samp{m}(メモリ)、オペランド 1 には
@samp{0}(これはオペランド 0 に一致しなければならないことを意味する)、
オペランド 2 には @samp{dKs} となる。
第二の選択肢は、オペランド0には @samp{d}(データ・レジスタ)、
オペランド 1 には @samp{0}、オペランド 2 には @samp{dmKs} となる。
制約中の @samp{=} と @samp{%} は全選択肢に適用される。
それらの意味は次の節 (@pxref{Class Preferences})で説明する。
@end ifset

@c FIXME Is this ? and ! stuff of use in asm()?  If not, hide unless INTERNAL
全てのオペランドがどれか一つの選択肢に収まれば、その命令は有効である。
収まらない場合には、選択肢毎に、コンパイラが、選択肢を適用可能にするためには、
オペランドをコピーするための命令を幾つ追加しなければならないかを数え上げる。
最もコピーが少なくて済む選択肢が選ばれる。もし二つの選択肢のコピー数が
同じなら、先に現れるものが選ばれる。この選択方法は文字 @samp{?} と
@samp{1} を使って変えることが出来る。

@table @code
@cindex @samp{?} in constraint
@cindex question mark
@item ?
どの選択肢も厳密には適用できないときの選択として、
@samp{?} が現れる選択肢をちょっとだけ低く評価する。
GNU CC は、この選択肢を、そこに現れる @samp{?} 毎に、一単位分コストが
余計にかかるとみなす。

@cindex @samp{!} in constraint
@cindex exclamation point
@item !
@samp{!}が現れる選択肢を大幅に低く評価する。
この選択肢は再ロードなしで収まる場合には依然として使うことができるが、
再ロードが必要な場合は、何か他の選択肢が使われる。
@end table

@ifset INTERNALS
insn のパターンが、その制約に複数の選択肢を持つ場合は、
アセンブラコードの見た目は、どの選択肢が一致したかによりほとんどの場合
決まる。その場合は、アセンブラコードを書き出す C のコードで、
変数 @code{which_alternative} を使うことが出来る。
@code{which_alternative} は、何番目の選択肢が実際に満たされるかを
示す番号である。第一の選択肢は 0、第二の選択肢は 1 といった具合である。
@xref{Output Statement}。
@end ifset

@ifset INTERNALS
@node Class Preferences
@subsection Register Class Preferences
@cindex class preference constraints
@cindex register class preference constraints

@cindex voting between constraint alternatives
オペランド制約にはもう一つの機能がある。
コンパイラが、疑似レジスタを割り当てるのにどの種類のハードウェアレジスタが
最適かを決定することを可能にする。
コンパイラは疑似レジスタを使っている insn に適用される制約を調べ、
レジスタクラスを指定する @samp{d} や @samp{a} のような機種依存文字を
探す。疑似レジスタは、最も「得票」の多いクラスに置かれる。
制約文字 @samp{g} と @samp{r} も投票する。汎用レジスタの好みについて
投票するのである。マシン記述がどのレジスタが汎用と考えられるかを
指定する。

当然、機種によっては全てのレジスタが等価であり、レジスタクラスが定義されない
場合もある。その場合には、上記のような複雑さは関係なくなる。
@end ifset

@node Modifiers
@subsection Constraint Modifier Characters
@cindex modifiers in constraints
@cindex constraint modifier characters

@c prevent bad page break with this line
以下に制約の修飾子となる文字を示す。

@table @samp
@cindex @samp{=} in constraint
@item =
オペランドが書き込み専用であることを意味する。このオペランドに
以前保持されていた値は捨てられ、出力データで置き換えられる。

@cindex @samp{+} in constraint
@item +
オペランドが読み込みと書き込みの両方に使われることを意味する。

コンパイラが、オペランドを制約を満たすように修正する際に、
どのオペランドが命令に対する入力で、どのオペランドが出力かを
知っている必要がある。@samp{=} は、出力であることを示す。
@samp{+} は、オペランドが入力と出力の両方に使われることを示す。
それ以外のオペランドは入力専用と仮定される。

@cindex @samp{&} in constraint
@cindex earlyclobber operand
@item &
(ある特定の選択肢において)このオペランドが@dfn{早期破壊}
オペランドであることを意味する。早期破壊オペランドとは、
命令が入力オペランドを使い終わる前に変更されるオペランドである。
このため、このオペランドは、入力オペランドや任意のメモリアドレスの一部
として使われるレジスタには置かれない。

@samp{&} は、記述されている選択肢に対してしか適用されない。
複数の選択肢のある制約では、一つの選択肢は @samp{&} を必要とするが
他の選択肢は必要としないということが時々ある。
そういう例については、68000 の @samp{movdf} insn を参照のこと。

入力オペランドは、それが入力として使われるのが以前の結果が書き込まれる
前なら、早期破壊オペランドに結び付けることができる。
この形式の選択肢を追加すると、入力の一部しか早期破壊により影響
を受けない場合は、GCC の生成するコードが良くなることが多い。
例えば、ARM の @samp{mulsi3} insn を参照のこと。

@samp{&} があっても、@samp{=} を書く必要はなくならない。

@cindex @samp{%} in constraint
@item %
このオペランドと次のオペランドが交換可能であることを指示する。
これは、コンパイラにとって、二つのオペランドを交換するのが
全ての制約を満たすようにするには最もコストの低い方法であれば、
その方法を取ることを可能にする。
@ifset INTERNALS
この制約は、オペランドを二つしか取らない加算命令向けのパターンで
良く使われる。以下に、68000 の半語の加算命令の定義例を示す。

@smallexample
(define_insn "addhi3"
  [(set (match_operand:HI 0 "general_operand" "=m,r")
     (plus:HI (match_operand:HI 1 "general_operand" "%0,0")
              (match_operand:HI 2 "general_operand" "di,g")))]
  @dots{})
@end smallexample
@end ifset

@cindex @samp{#} in constraint
@item #
次に続く文字からコンマまでの全ての文字を制約としては使わないことを
示す。それらの文字は、レジスタ選択でのみ意味を持つ。

@ifset INTERNALS
@cindex @samp{*} in constraint
@item *
次に続く文字がレジスタ選択の際には無視されることを示す。
@samp{*} は、制約としての制限の意味と再ロードには影響を与えない。

次に例を示す。68000 は、データ・レジスタ中の半語を符号拡張する命令を
持っており、また、アドレス・レジスタにコピーすることで符号拡張を
行なうことも出来る。どちらの種類のレジスタも受け入れ可能な場合、
アドレスレジスタをコピー先とした場合の制約がより限定が緩いので、
レジスタ割当がアドレスレジスタを最終目標とするのが最適である。
このため、@samp{*} を使って、制約文字 @samp{d} (データレジスタ用)が
好ましいレジスタを選択するときには無視されるようにする。

@smallexample
(define_insn "extendhisi2"
  [(set (match_operand:SI 0 "general_operand" "=*d,a")
        (sign_extend:SI
         (match_operand:HI 1 "general_operand" "0,g")))]
  @dots{})
@end smallexample
@end ifset
@end table

@node Machine Constraints
@subsection Constraints for Particular Machines
@cindex machine specific constraints
@cindex constraints, machine specific

@code{asm} の引数には、可能な限り、汎用の制約文字を使ったほうが良い。
その方が読む人に意味が伝わりやすくなるからだ。
汎用の制約文字では駄目な場合は、色々なアーキテクチャで同じような
意味を持つ制約文字を使うようにする。最も共通して良く使われるのは、
@samp{m} と @samp{r} である。それぞれ、メモリと汎用レジスタを表す。
@pxref{Simple Constraints}
それに、@samp{I} が、最も一般的な即値定数の形式を表す文字として使われる。

マシンアーキテクチャ毎に、@file{config/@var{machine}.h} というファイルで、
固有の制約を追加定義している。これらの制約は、@code{asm} 文だけでなく、
コンパイラ自身の命令の生成に使われる。
このため、制約のうちいくつかは、@code{asm} 文に使うにはあまり意味の
ないものがある。
制約は以下のマクロ群によって定義される。

@table @code
@item REG_CLASS_FROM_LETTER
レジスタクラスの制約(普通は小文字だけである)。

@item CONST_OK_FOR_LETTER_P
即値定数の制約。ワード長、あるいはそれより短い精度の、非浮動小数点定数
向けである。通常、大文字である。

@item CONST_DOUBLE_OK_FOR_LETTER_P
即値定数の制約。全ての浮動小数点定数とワード長を越える精度の定数
向けである。通常、大文字である。

@item EXTRA_CONSTRAINT
レジスタまたはメモリの特別な場合。
このマクロは必須ではなく、少数のマシンでのみ定義されている。
@end table

本コンパイラのソースの、読者のマシン向けのマクロ定義を調べるのが、
正しい制約を使っているかどうかを確認するのに一番良い方法である。
とはいうものの、以下に幾つかの特定の機種で使える機種依存の制約を
要約しておく。

@c Please keep this table alphabetized by target!
@table @emph

@item ARM family---@file{arm.h}
@table @code

@item f
浮動小数点レジスタ

@item F
浮動小数点定数 0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 10.0 のどれか一つ

@item G
符号反転したときに制約 @samp{F} を満たす浮動小数点定数

@item z
FPR-GPR 間移動用の @samp{FPMEM} スタックメモリ

@item I
データ処理命令の即値オペランドとして有効な整数。
すなわち、0 から 255 の間の整数を 2 の倍数分回転したものである。

@item J
-4095 〜 4095 の範囲の整数

@item K
ビット反転(1の補数)したときに制約 @samp{I} を満たす整数

@item L
符号反転(2の補数)したときに制約 @samp{I} を満たす整数

@item M
0 〜 32 の範囲の整数

@item Q
正確なアドレスが一個のレジスタにある場合のメモリ参照
(@code{asm} 文の場合には、@samp{m} の方が良い)。

@item R
定数領域に置かれるデータ

@item S
現在ファイルのテキストセグメント中のシンボル
@end table

@item AMD 29000 family---@file{a29k.h}
@table @code
@item l
ローカルレジスタ 0

@item b
バイトポインタ(@samp{BP})レジスタ

@item q
@samp{Q} レジスタ

@item h
特殊目的のレジスタ

@item A
第一アキュムレータレジスタ

@item a
他のアキュムレータレジスタ

@item f
浮動小数点レジスタ

@item I
0 より大きく、0x100 より小さい定数

@item J
0 より大きく、0x1000 より小さい定数

@item K
上位 24 ビットがオン(1)の定数

@item L
上位 8 ビットがオン(1) の 16 ビット定数

@item M
上位 16 ビットがオン(1) の 32 ビット定数

@item N
8ビットに収まる 32ビットの負の定数。

@item O
定数 0x80000000か、あるいは、29050 の場合は、下位16ビットが 0 である
任意の32ビット定数。

@item P
8ビットに収まる 16ビットの負の定数。

@item G
@itemx H
浮動小数点定数(@code{asm} 文では、代わりに機種独立の @samp{E} か @samp{F}
を使うこと。)
@end table

@item MIPS---@file{mips.h}
@table @code
@item d
汎用整数レジスタ

@item f
浮動小数点レジスタ(もしあれば)

@item h
@samp{Hi} レジスタ

@item l
@samp{Lo} レジスタ

@item x
@samp{Hi} または @samp{Lo} レジスタ

@item y
汎用整数レジスタ

@item z
浮動小数点ステータスレジスタ

@item I
符号付き 16 ビット定数(算術演算命令向け)

@item J
ゼロ

@item K
ゼロ拡張された 16 ビット定数(論理命令向け)

@item L
下位16ビットがゼロの定数(@code{lui} でロード可能)

@item M
32ビット定数のうち、ロードするのに 2 命令必要なもの(@samp{I} でも
@samp{K} でも @samp{L} でもない定数)

@item N
負の16ビット定数

@item O
二の冪乗

@item P
正の 16 ビット定数

@item G
浮動小数点のゼロ

@item Q
一個以上の命令でロード可能なメモリ参照
(@code{asm} 文の場合は、@samp{m} の方が良い)。

@item R
一個の命令でロード可能なメモリ参照
(@code{asm} 文の場合は、@samp{m} の方が良い)。

@item S
外部 OSF/rose PIC 形式でのメモリ参照
(@code{asm} 文の場合は、@samp{m} の方が良い)。
@end table

@item Motorola 680x0---@file{m68k.h}
@table @code
@item a
アドレスレジスタ

@item d
データレジスタ

@item f
利用可能なら、68881 の浮動小数点レジスタ

@item x
利用可能なら、Sun の FPA の浮動小数点レジスタ。

@item y
利用可能なら、Sun の FPA の浮動小数点レジスタの最初の 16 個。

@item I
1 〜 8 までの整数

@item J
16 ビットの符号付きの数

@item K
絶対値が 0x80 より大きい符号付き整数。

@item L
-8 〜 -1 の整数

@item M

@item G
68881 の定数ではない浮動小数点定数。

@item H
Sun の FPA で使用可能な浮動小数点定数。
@end table

@item IBM RS6000---@file{rs6000.h}
@table @code
@item b
アドレスベースレジスタ

@item f
浮動小数点レジスタ

@item h
@samp{MQ}, @samp{CTR},  @samp{LINK} レジスタ

@item q
@samp{MQ} レジスタ

@item c
@samp{CTR} レジスタ

@item l
@samp{LINK} レジスタ

@item x
@samp{CR} レジスタ(条件レジスタ)の 0 番

@item y
@samp{CR} レジスタ(条件レジスタ)

@item z
FPR-GPR 間転送用の @samp{FPMEM} スタックメモリ

@item I
符号付きの 16 ビット定数

@item J
下位16ビットが 0 の定数

@item K
上位の 16 ビットが 0 の定数

@item L
マスク用オペランドとして適切な定数

@item M
31 より大きい定数

@item N
2 の正確な冪乗

@item O
ゼロ

@item P
符号反転したものが符号付き 16 ビット定数になる定数

@item G
一ワードにつき一回の命令でレジスタにロード可能な浮動小数点定数。

@item Q
あるレジスタからのオフセットであるメモリオペランド
(@code{asm} 文の場合は、@samp{m} の方が良い)。

@item R
AIX の TOC エントリ

@item S
64ビットのマスク・オペランドとして適した定数。

@item U
System V Release 4 の小データ領域の参照
@end table

@need 1000
@item SPARC---@file{sparc.h}
@table @code
@item f
32 ビットまたは 64 ビットの値を保持できる浮動小数点レジスタ。

@item e
64 ビットまたは 128 ビットの値を保持できる浮動小数点レジスタ。

@item I
13ビットの符号付き定数

@item J
ゼロ

@item K
下位12ビットが 0 の 32ビット定数(@code{sethi} 命令でロード可能な
定数)

@item G
浮動小数点数のゼロ。

@item H
13 ビットの符号付き定数で、32 ビットまたは 64 ビットに符号拡張される。

@item Q
1命令でロード可能なメモリ参照(@samp{m} の方が、@code{asm} 文には
もっと適している。)

@item S
定数、またはメモリアドレス

@item T
8バイト境界に整合されたメモリアドレス

@item U
偶数レジスタ
@end table

@item Intel 386---@file{i386.h}
@table @code
@item q
@samp{a}、@code{b}、@code{c}、@code{d} レジスタ

@item A
@samp{a}、@code{d} レジスタ(64ビット int 向け)

@item f
浮動小数点レジスタ

@item t
第一(スタックの一番上の)浮動小数点レジスタ

@item u
第二浮動小数点レジスタ

@item a
@samp{a} レジスタ

@item b
@samp{b} レジスタ

@item c
@samp{c} レジスタ

@item d
@samp{d} レジスタ

@item D
@samp{di} レジスタ

@item S
@samp{si} レジスタ

@item I
0〜31 の定数(32ビットのシフト用)

@item J
0〜63 の定数(64ビットのシフト用)

@item K
@samp{0xff}

@item L
@samp{0xffff}

@item M
0、1、2、3(@code{lea} 命令のシフト数である)

@item N
0 から 255 の範囲の定数(@code{out} 命令用)

@item G
80387 標準の浮動小数点定数
@end table

@item Intel 960---@file{i960.h}
@table @code
@item f
浮動小数点レジスタ(@code{fp0} から @code{fp3})

@item l
ローカルレジスタ(@code{r0} から @code{r15})

@item b
グローバルレジスタ(@code{g0} から @code{g15})

@item d
任意のローカルまたはグローバルレジスタ

@item I
0 から 31 の整数

@item J
0

@item K
-31 から 0 の整数

@item G
浮動小数点の 0

@item H
浮動小数点の 1
@end table

@end table

@node Standard Names
@section Standard Pattern Names For Generation
@cindex standard pattern names
@cindex pattern names
@cindex names, pattern

以下に、RTL 生成パスで意味を持つ命令パターン名の一覧を示す。
ある命令パターンに以下の名前の一つを与えると、RTL 生成パスは、
ある一定の仕事を達成するためにそのパターンを使って良いという
ことがわかる。

@table @asis
@cindex @code{mov@var{m}} instruction pattern
@item @samp{mov@var{m}}
ここで @var{m} は、二文字からなるマシンモード名を小文字で表したもの
である。この命令パターンは、指定されたマシンモードのデータを
オペランド 1 からオペランド 0 に移動する。
例えば、@samp{movsi} は全ワードのデータを移動する。

オペランド 0 が、モードが @var{m} より広いレジスタの、モード @var{m} の
@code{subreg} であるなら、この命令の効果はモード @var{m} に対応する
レジスタの一部に指定された値を格納することである。
レジスタの他の部分に対する効果は未定義である。

このクラスのパターンは色々な点で特殊である。
まず第一に、これらの名前はそれぞれ定義されなくてはならない。
なぜなら、データをある場所から他の場所にコピーする方法が
他にはないからである。

第二に、これらのパターンは RTL 生成パスだけで使われるのではない。
再ロードパスにおいても、値をスタックスロットから一時レジスタにコピーする
move insn を生成する可能性がある。
その時、オペランドの一つはハードレジスタであり、他の一つは、
レジスタに再ロードされる必要となる可能性があるオペランドである。

@findex force_reg
このため、このようなオペランドの対が与えられたとき、
このパターンは再ロードを必要とせず、一時レジスタ--オペランド以外のレジスタを
必要としない RTL を生成しなければならない。
例えば、@code{define_expand} でそのパターンをサポートするなら、
その場合、@code{define_expand} は @code{force_reg} や
新しい疑似レジスタを生成するような他の関数は呼び出してはならない

RISCマシンのサブワードモードについても、その機種で
メモリからサブワードモードを取り出すのに複数の命令と一時レジスタが
必要なら、この要求は存在する。
この要求を満たすにはどうすれば良いかは @file{spur.md} を参照のこと。

@findex change_address
再ロードの最中、無効なアドレスのメモリ参照がオペランドとして渡される
可能性がある。そういうアドレスは、再ロードパスの後の方で有効なアドレスに
置き換えられる。この場合、そのままでは、そのアドレスに対してはそれを
使うという以外には何も行なわれない。
もしそれがコピーされたとすると、有効なアドレスには置き換えられない。
そういうアドレスを有効なアドレスに変えようとする試みは全く行なわれず、
(@code{change_address} のような)そういう処理をする関数も呼ばれない。
@code{general_operand} をそのようなアドレスに適用すると失敗することに
注意。

@findex reload_in_progress
グローバル変数 @code{reload_in_progress}(これは必要なら明示的に宣言
しなければならない)を使って、そのような特別な取扱いが必要かどうかを
決定することができる。

再ロードされるオペランドの種類は、マシン記述のその他の部分に依存するが、
RISC 機種では普通はハードレジスタを割り当てることの出来なかった
疑似レジスタに限られる。一方、それ以外の機種では明示的なメモリ参照は
再ロードされる可能性がある。

あるオブジェクトをメモリへ、あるいはメモリから移動するのに、
スクラッチレジスタが必要な場合は、生死解析に先だって @code{gen_reg_rtx}
を使って割り当てることができる。

再ロード後にスクラッチレジスタが必要になる場合が
あるなら、@code{SECONDARY_INPUT_RELOAD_CLASS} を定義しなければならない。
また、それらを検出するためにおそらく @code{SECONDARY_OUTPUT_RELOAD_CLASS}
も定義しなければならない。それから、それらに対する取扱いのために、
@samp{reload_in@var{m}} パターンか @samp{reload_out@var{m}} パターンを
定義しなければならない。@xref{Register Classes}。

@findex no_new_pseudos
グローバル変数 @code{no_new_pseudos} を使って、新しい疑似レジスタを
作るのが危険かどうかを決定することができる。
この変数がゼロでないときは、@code{gen_reg_rtx} を使って新しい疑似レジスタを
割り当てるのは危険である。

@samp{move@var{m}} についての制約は、任意のハードレジスタから別の任意の
ハードレジスタへの移動を許さなければならない。
ただし、@code{HARD_REGNO_MODE_OK} がどちらのレジスタもモード @var{m}
であることを許し、これらのレジスタのクラスに @code{REGISTER_MOVE_COST}
を適用した場合に 2 という値が返ってくるという前提がある。

固定小数点値を保持できる任意のレジスタについて、値を出し入れできる
浮動小数点 @samp{mov@var{m}} 命令をサポートするのは必須である。
なぜなら共用体や構造体(モードは @code{SImode} か @code{DImode})は
そのようなレジスタに入れることができ、浮動小数点メンバが存在する
可能性があるからである。

また、浮動小数点レジスタから値を出し入れする固定小数点 @samp{mov@var{m}}
命令も必要である。ただ、残念なことに著者はどうしてそうしたのだったかを
忘れてしまっており、現在でもその通りであるかどうかがわからない。
@code{HARD_REGNO_MODE_OK} が浮動小数点レジスタに固定小数点値を
入れるのを拒絶するなら、固定小数点 @samp{mov@var{m}} 命令の制約は
浮動小数点レジスタに再ロードするのを避けるように定義しなければならない。

@cindex @code{reload_in} instruction pattern
@cindex @code{reload_out} instruction pattern
@item @samp{reload_in@var{m}}
@itemx @samp{reload_out@var{m}}
@samp{mov@var{m}} と同様だが、オペランド 0 とオペランド 1 の間で
移動を行なうのにスクラッチレジスタが必要な場合に使われる。
オペランド 2 がそのスクラッチレジスタを記述する。
@pxref{Register Classes} のマクロ @code{SECONDARY_RELOAD_CLASS} の
議論を参照のこと。

@cindex @code{movstrict@var{m}} instruction pattern
@item @samp{movstrict@var{m}}
@samp{mov@var{m}} と同様だが、オペランド 0 が、その自然なモードが
もっと広いようなレジスタのモード @var{m} の @code{subreg} であるなら、
@samp{movstrict@var{m}} 命令は、モード @var{m} に属する部分を除いて、
そのレジスタをなんら変更しないことが保証される。

@cindex @code{load_multiple} instruction pattern
@item @samp{load_multiple}
幾つかの連続したメモリ位置から幾つかの連続したレジスタにロードする。
オペランド 0 は連続するレジスタの先頭のレジスタであり、
オペランド 1 は、メモリ位置の先頭であり、オペランド 2 は、
連続するレジスタ数を指定する定数である。

これを定義するのは、ターゲットマシンが実際にこのような命令を持っている
場合に限る。メモリから連続するレジスタへロードするのに最も効率が
良い方法が、一個一個ロードすることであれば、このマクロは定義しては
いけない。

マシンによっては、どの連続するレジスタがメモリに格納可能であるか
について制限がある。例えば、先頭や末尾のレジスタ番号が特定の
ものでなくてはいけないとか、有効なレジスタ数の範囲内でのみ
可能である、などである。
このような制限がある場合は、@code{define_expand}(@pxref{Expander Definitions})
を使って、制限が満たされない場合はそのパターンが失敗するようにする。

生成される insn は一個の @code{parallel} として書き、その要素は
一個のレジスタを適切なメモリ位置に設定する @code{set} とする
(また、@code{use} あるいは @code{clobber} の要素も必要である)。
@code{match_parallel} (@pxref{RTL Template})を使って、その insn を
認識する。
この insn パターンの使い方の例としては、@file{a29k.md} と @file{rs6000.md}
を参照のこと。

@cindex @samp{store_multiple} instruction pattern
@item @samp{store_multiple}
@samp{load_multiple} と同様だが、複数の連続したレジスタを
連続したメモリ位置に格納する。
オペランド 0 が連続したメモリ位置の先頭で、オペランド 1 が先頭のレジスタ、
オペランド 2 がある定数で、連続するレジスタの数を表す。

@cindex @code{add@var{m}3} instruction pattern
@item @samp{add@var{m}3}
オペランド 2 と 1 を加算し、結果をオペランド 0 に格納する。
オペランドは全てモードが @var{m} でなければならない。
2オペランドのマシンでも使用可能である。
その場合は、オペランド 1 とオペランド 0 が同じ位置にあるという制約を
課せば良い。

@cindex @code{sub@var{m}3} instruction pattern
@cindex @code{mul@var{m}3} instruction pattern
@cindex @code{div@var{m}3} instruction pattern
@cindex @code{udiv@var{m}3} instruction pattern
@cindex @code{mod@var{m}3} instruction pattern
@cindex @code{umod@var{m}3} instruction pattern
@cindex @code{smin@var{m}3} instruction pattern
@cindex @code{smax@var{m}3} instruction pattern
@cindex @code{umin@var{m}3} instruction pattern
@cindex @code{umax@var{m}3} instruction pattern
@cindex @code{and@var{m}3} instruction pattern
@cindex @code{ior@var{m}3} instruction pattern
@cindex @code{xor@var{m}3} instruction pattern
@item @samp{sub@var{m}3}, @samp{mul@var{m}3}
@itemx @samp{div@var{m}3}, @samp{udiv@var{m}3}, @samp{mod@var{m}3}, @samp{umod@var{m}3}
@itemx @samp{smin@var{m}3}, @samp{smax@var{m}3}, @samp{umin@var{m}3}, @samp{umax@var{m}3}
@itemx @samp{and@var{m}3}, @samp{ior@var{m}3}, @samp{xor@var{m}3}
他の算術演算についても同様である。

@cindex @code{mulhisi3} instruction pattern
@item @samp{mulhisi3}
オペランド 1 と 2 を乗算する。どちらもモードは @code{HImode} である。
@code{SImode} の乗算の結果をオペランド 0 に格納する。

@cindex @code{mulqihi3} instruction pattern
@cindex @code{mulsidi3} instruction pattern
@item @samp{mulqihi3}, @samp{mulsidi3}
他の幅の、乗算の結果がオペランドの幅よりも大きくなる命令についても
同様である。

@cindex @code{umulqihi3} instruction pattern
@cindex @code{umulhisi3} instruction pattern
@cindex @code{umulsidi3} instruction pattern
@item @samp{umulqihi3}, @samp{umulhisi3}, @samp{umulsidi3}
符号なしの乗算を行なう、乗算の結果がオペランドの幅よりも大きくなる命令に
ついても同様である。

@cindex @code{smul@var{m}3_highpart} instruction pattern
@item @samp{mul@var{m}3_highpart}
オペランド 1 と 2 の符号付き乗算を行なう。モードは @var{m} である。
積の上位半分をオペランド 0 に格納する。
積の下位半分は捨てられる。

@cindex @code{umul@var{m}3_highpart} instruction pattern
@item @samp{umul@var{m}3_highpart}
@samp{mul@var{m}3_highpart} と、乗算が符号なしで行なわれる点を
除いて、同じである。

@cindex @code{divmod@var{m}4} instruction pattern
@item @samp{divmod@var{m}4}
商と剰余の両方を生成する符号付き除算である。
オペランド1 をオペランド 2 で割り、商がオペランド 0 に、
剰余がオペランド 3 に格納される。

商と剰余の両方を生成する命令がある機種では、@samp{divmod@var{m}4} の
パターンを定義し、@samp{div@var{m}3} と @samp{mod@var{m}3} の
パターンは定義しないようにすること。
これにより、商と剰余の両方を計算するという比較的良くある場合に
最適化が可能になる。

単に商か剰余のどちらかを生成する命令が存在し、両方を生成する命令よりも
効率が良い場合は、@samp{divmod@var{m}4} の出力ルーチンを、
@code{find_reg_note} を呼び出して、商か剰余についての @code{REG_UNUSED}
ノートを見つけ、適切な命令を生成するように書く。

@cindex @code{udivmod@var{m}4} instruction pattern
@item @samp{udivmod@var{m}4}
@samp{divmod@var{m}4} と、除算が符号なしで行なわれる点を除いて、
同じである。

@cindex @code{ashl@var{m}3} instruction pattern
@item @samp{ashl@var{m}3}
オペランド 1 を、オペランド 2 で指定されたビット数だけ左に
算術シフトし、結果をオペランド 0 に格納する。
ここで、@var{m}は、オペランド 0 とオペランド 1 のモードである。
オペランド 2 のモードは、命令パターンにより指定され、コンパイラは
命令を生成する前にオペランドをそのモードに変換する。

@cindex @code{ashr@var{m}3} instruction pattern
@cindex @code{lshr@var{m}3} instruction pattern
@cindex @code{rotl@var{m}3} instruction pattern
@cindex @code{rotr@var{m}3} instruction pattern
@item @samp{ashr@var{m}3}, @samp{lshr@var{m}3}, @samp{rotl@var{m}3}, @samp{rotr@var{m}3}
その他のシフトとローテート命令群。@code{ashl@var{m}3} と同様である。

@cindex @code{neg@var{m}2} instruction pattern
@item @samp{neg@var{m}2}
オペランド 1 の符号を反転し、その結果をオペランド 0 に格納する。

@cindex @code{abs@var{m}2} instruction pattern
@item @samp{abs@var{m}2}
オペランド 1 の絶対値をオペランド 0 に格納する。

@cindex @code{sqrt@var{m}2} instruction pattern
@item @samp{sqrt@var{m}2}
オペランド 1 の平方根をオペランド 0 に格納する。

C の組み込み関数 @code{sqrt} は、常に C 言語のデータ型 @code{double}
に対応するモードを使用する。

@cindex @code{ffs@var{m}2} instruction pattern
@item @samp{ffs@var{m}2}
オペランド 0 に、1 と、オペランド 1 のビットが 1 のうち最下位のものの
インデックスを足したものを格納する。
オペランド 1 がゼロなら、ゼロを格納する。
@var{m} はオペランド 0 のモードである。オペランド 1 のモードは命令
パターンにより指定され、コンパイラが命令を生成する前にオペランド 1 を
そのモードに変換する。

C の組み込み関数 @code{ffs} は、C のデータ型 @code{int} に
対応するモードを常に使う。

@cindex @code{one_cmpl@var{m}2} instruction pattern
@item @samp{one_cmpl@var{m}2}
オペランド 1 のビット毎の補数をオペランド 0 に格納する。

@cindex @code{cmp@var{m}} instruction pattern
@item @samp{cmp@var{m}}
オペランド 0 とオペランド 1 を比較し、条件コードを設定する。
RTL パターンは以下のようにする必要がある。

@smallexample
(set (cc0) (compare (match_operand:@var{m} 0 @dots{})
                    (match_operand:@var{m} 1 @dots{})))
@end smallexample

@cindex @code{tst@var{m}} instruction pattern
@item @samp{tst@var{m}}
オペランド 0 とゼロを比較し、条件コードを設定する。
RTL パターンは以下のようにする必要がある。

@smallexample
(set (cc0) (match_operand:@var{m} 0 @dots{}))
@end smallexample

@code{(cc0)} を使わない機種では、@samp{tst@var{m}} パターンを
定義すべきでない。定義すると、どの @code{set} 演算が比較なのか
はっきりしなくなってしまうために最適化パスが混乱する。
代わりに、@samp{cmp@var{m}} パターンを使うべきである。

@cindex @code{movstr@var{m}} instruction pattern
@item @samp{movstr@var{m}}
ブロック移動命令である。移動先と移動元の文字列のアドレスが最初の
二つのオペランドであり、どちらも @code{Pmode} モードである。

移動すべきバイト数を三番目のオペランドで、モード @var{m} で指定する。
普通は、@var{m} として @code{word_mode} を指定する。
しかし、有効な長さの範囲が全ワードで表せる範囲より狭いことが
分かっているなら、より良いコードを生成することができるという
場合には、効率良く扱える値の範囲に対応するモード(例えば、
0--127の範囲の値の場合なら @code{QImode} とする。負の数に見えるものは
避けることに注意)のパターンと
@code{word_mode} のパターンの両方を提供すべきである。

四番目のオペランドは、移動元と移動先で共通の既知のアライメントを
@code{const_int} rtx の形で表したものである。
つまり、コンパイラが移動元も移動先もワード境界にアライメントされている
ことを知っているなら、このオペランドには 4 という値が与えられる。

複数の @code{movstr@var{m}} パターンを記述するのは、
より小さなモードに対するそれらのパターンについて、第一、第二、第四オペランド
についての制限がより少ない場合にのみ、有益である。
@code{movstr@var{m}} のモード @var{m} は、ブロック中の個々の移動された
データ単位のモードには、なんら制限を与えないことに注意。

このパターンは、移動元と移動先の文字列が重なっている可能性は、
特に考えなくて良い。

@cindex @code{clrstr@var{m}} instruction pattern
@item @samp{clrstr@var{m}}
ブロックのクリア命令である。対象文字列のアドレスが第一オペランドであり、
モード @code{Pmode} である。クリアすべきバイト数が第二オペランドであり、
モード @var{m} である。モードの選択についての議論は、@samp{movstr@var{m}} を
参照のこと。

三番目のオペランドは、目的先の既知のアラインメントを @code{const_int} RTX の
形で表したものである。つまり、コンパイラが目的先がワード整合されている
ことを知っているなら、このオペランドの値を 4 とする。

複数の @code{clrstr@var{m}} の使い方は、@code{movstr@var{m}} と
同じである。

@cindex @code{cmpstr@var{m}} instruction pattern
@item @samp{cmpstr@var{m}}
ブロック同士の比較命令で、オペランドは5つある。
オペランド 0 には出力が置かれ、モードは @var{m} である。
その他の4つのオペランドは、@samp{movstr@var{m}} のオペランドと同様である。
指定された二つのメモリブロックがバイト毎に辞書順で比較される。
この命令の結果、オペランド 0 に格納された値の符号が、比較結果になる。

@cindex @code{strlen@var{m}} instruction pattern
@item @samp{strlen@var{m}}
文字列の長さを計算する。オペランドは三つある。
オペランド 0 は結果(モードは @var{m})を格納する。
オペランド 1 は、文字列の先頭の文字を参照する @code{mem} である。
オペランド 2 は、検索すべき文字(通常はゼロ)である。
オペランド 3 は、文字列の開始位置の既知のアラインメントを記述する
定数である。

@cindex @code{float@var{mn}2} instruction pattern
@item @samp{float@var{m}@var{n}2}
符号付き整数オペランド 1(固定小数点モード @var{m} として有効) を
浮動小数点モード @var{n} に変換し、オペランド 0 (モード @var{n})に格納する。

@cindex @code{floatuns@var{mn}2} instruction pattern
@item @samp{floatuns@var{m}@var{n}2}
符号なし整数オペランド 1(固定小数点モード @var{m} として有効) を
浮動小数点モード @var{n} に変換し、オペランド 0 (モード @var{n})に格納する。

@cindex @code{fix@var{mn}2} instruction pattern
@item @samp{fix@var{m}@var{n}2}
オペランド 1(浮動小数点モード @var{m} として有効)を符号付き数として
固定小数点モード @var{n} に変換し、オペランド 0(モード @var{n}) に
格納する。この命令の結果は、オペランド 1 の値が整数の場合にのみ
定義される。

@cindex @code{fixuns@var{mn}2} instruction pattern
@item @samp{fixuns@var{m}@var{n}2}
オペランド 1(浮動小数点モード @var{m} として有効)を符号なし数として
固定小数点モード @var{n} に変換し、オペランド 0(モード @var{n}) に
格納する。この命令の結果は、オペランド 1 の値が整数の場合にのみ
定義される。

@cindex @code{ftrunc@var{m}2} instruction pattern
@item @samp{ftrunc@var{m}2}
オペランド 1(浮動小数点モード @var{m} として有効) を
整数値に変換する。ただし、依然として浮動小数点モード @var{m} で表現される。
結果は、オペランド 0(浮動小数点モード @var{m} として有効)に格納される。

@cindex @code{fix_trunc@var{mn}2} instruction pattern
@item @samp{fix_trunc@var{m}@var{n}2}
@samp{fix@var{m}@var{n}2} と同様だが、モードが @var{m} の
任意の浮動小数点値について、その値を整数に変換することにより、
動作する。

@cindex @code{fixuns_trunc@var{mn}2} instruction pattern
@item @samp{fixuns_trunc@var{m}@var{n}2}
@samp{fixuns@var{m}@var{n}2} と同様だが、モードが @var{m} の
任意の浮動小数点値について、その値を整数に変換することにより、
動作する。

@cindex @code{trunc@var{mn}2} instruction pattern
@item @samp{trunc@var{m}@var{n}2}
(モード @var{m} で有効な)オペランド1をモード @var{n} に切り詰め、
結果を(モードが @var{n}の)オペランド 0 に格納する。
両方のモードが固定小数点モードか、両方のモードが浮動小数点モードで
なければならない。

@cindex @code{extend@var{mn}2} instruction pattern
@item @samp{extend@var{m}@var{n}2}
(モード @var{m} で有効な)オペランド1をモード @var{n} に符号拡張し、
結果を(モードが @var{n}の)オペランド 0 に格納する。
両方のモードが固定小数点モードか、両方のモードが浮動小数点モードで
なければならない。

@cindex @code{zero_extend@var{mn}2} instruction pattern
@item @samp{zero_extend@var{m}@var{n}2}
(モード @var{m} で有効な)オペランド1をモード @var{n} にゼロ拡張し、
結果を(モードが @var{n}の)オペランド 0 に格納する。
どちらのモードも固定小数点モードでなければならない。

@cindex @code{extv} instruction pattern
@item @samp{extv}
オペランド 1(レジスタかメモリオペランド)からビットフィールドを
抽出する。オペランド2 でビット幅を指定し、オペランド3で開始ビットを
指定する。結果をオペランド 0 に格納する。
オペランド 0 は、@code{word_mode} モードでなければならない。
オペランド 1 は、@code{byte_mode} か @code{word_mode} である。
@code{word_mode} はレジスタにしか許されないことが多い。
オペランド 2 と 3 は、@code{word_mode} として有効でなくてはならない。

RTL 生成パスは、オペランド 2 とオペランド 3 が定数の場合しか
この命令を生成しない。

ビットフィールドの値は、オペランド 0 に格納される前に
全語の整数に符号拡張される。

@cindex @code{extzv} instruction pattern
@item @samp{extzv}
@samp{extv} との違いは、ビットフィールドの値がゼロ拡張される点である。

@cindex @code{insv} instruction pattern
@item @samp{insv}
オペランド 3(@code{word_mode} として有効でなくてはならない)を
オペランド 0 のビットフィールドに格納する。
オペランド 1 でビット幅を指定し、オペランド 2 で開始ビットを指定する。
オペランド 0 は、@code{byte_mode} か @code{word_mode} である。
@code{word_mode} はレジスタにしか許されないことが多い。
オペランド 1 と 2 は、@code{word_mode} として有効でなくてはならない。

RTL 生成パスは、オペランド 1 とオペランド 2 が定数の場合しか
この命令を生成しない。

@cindex @code{mov@var{mode}cc} instruction pattern
@item @samp{mov@var{mode}cc}
条件付きで、オペランド 2 またはオペランド 3 を、オペランド 1 に入っている
比較にしたがって、オペランド 0 に移動する。
比較が真ならオペランド 2 がオペランド 0 に移動され、
偽ならオペランド 3 が移動される。

比較されるオペランドのモードは、移動されるオペランドのモードと
同じである必要はない。例えば sparc64 のような機種には、
浮動小数点の条件コードに基づいて整数を条件付きで移動したり、
その逆を行なう命令がある。

条件付き移動命令を持たない機種では、このパターンは定義しないこと。

@cindex @code{s@var{cond}} instruction pattern
@item @samp{s@var{cond}}
条件コードにしたがって、ゼロか非ゼロをオペランドに格納する。
条件 @var{cond} が真なら格納される値は非ゼロである。
@var{cond} は、比較演算式コードの名前で、例えば、@code{eq}、@code{lt}、
@code{leu} 等がある。

@code{match_operand} 式を書くときにオペランドが持たなければならない
モードを指定する。コンパイラはどのモードを使ったかを見て、
自動的にそのモードのオペランドを提供する。

条件が真の場合に格納される値は、下位ビットが 1 か、あるいは負で
なければならない。
そうなっていないと、その命令は適切でないので、マシン記述から取り除く
べきである。マクロ @code{STORE_FLAG_VALUE} (@pxref{Misc}) を定義することで
正確にはどの値がストアされるかということを GCC に対して指示する必要がある。
全ての @samp{s@var{cond}} パターンに対して使用可能な指示が見つからない
場合は、これらの演算をマシン記述から取り除くべきである。

これらの演算は失敗する可能性があるが、失敗して良いのは比較的
珍しいケースだけである。整数の比較を含む良くあるケースで
失敗することがあるなら、そういうパターンは取り除くのが良い。

そういう演算が取り除かれると、GNU CC は、定数 1 をターゲットに
コピーし、そのターゲットにゼロを代入している付近に分岐する。
このコードが、@samp{s@var{cond}} パターンで使われる潜在的な
命令に、結果を @code{SImode} の 1 か ゼロに変換するのに必要な命令が
続けたものより、効率が良いのなら、マシン記述から @samp{s@var{cond}} という
演算を取り除くべきである。

@cindex @code{b@var{cond}} instruction pattern
@item @samp{b@var{cond}}
条件分岐命令。オペランド 0 は、ジャンプ先のラベルを参照する
@code{label_ref} である。条件コードが条件 @var{cond} に一致した場合に
ジャンプする。

機種によっては、個々で想定した、比較命令の後には条件分岐命令が
続くというモデルに従わないものもある。その場合、@samp{cmp@var{m}}
(と @samp{tst@var{m}}) パターンでは、オペランドを単に格納しておき、
条件分岐演算を表す @code{define_expand} (@pxref{Expander Definitions})
で必要とされる全ての insn を生成すべきである。@samp{b@var{cond}} 
パターンを展開する全ての呼び出しの直前には、@samp{cmp@var{m}} パターンか
@samp{tst@var{m}} パターンを展開する呼び出しが置かれる。

条件コード値を表すのに疑似レジスタを使っていたり、
比較に使われるモードがテストされる条件に依存する機種でも、やはり
上記の方法を使うべきである。 @xref{Jump Patterns}.

上の議論は、@samp{mov@var{mode}cc} と @samp{s@var{cond}} のパターンにも
当てはまる。

@cindex @code{call} instruction pattern
@item @samp{call}
値を返さないサブルーチン命令呼びだしである。
オペランド 0 は呼び出すべき関数であり、オペランド 1 は
@code{const_int} としてスタックに積まれた引数のバイト数である。
オペランド 2 はオペランドとして使われるレジスタの数である。

ほとんどのマシンでは、オペランド 2 は実際には RTL パターンには格納されない。
この情報をアセンブラコードに置く必要のある、いくつかの RISC 機種の
ために提供されている。オペランド 1 の代わりに RTL に置くことができる。

オペランド 0 は、アドレスがその関数のアドレスである @code{mem} RTX で
あるべきである。だが、このアドレスは、ターゲット機種上での
正当なメモリアドレスになっていなくても、@code{symbol_ref} になりうる
ことに注意して欲しい。また、call 命令の正しい引数でない場合も、
この演算用のパターンは、アドレスをレジスタに置き、そのレジスタを
call 命令で使うような @code{define_expand} (@pxref{Expander Definitions})
になっている必要がある。

@cindex @code{call_value} instruction pattern
@item @samp{call_value}
値を返すサブルーチン呼び出し命令である。
オペランド 0 は、値が返されるハードレジスタである。
さらにオペランドが三つあり、それらは @samp{call} 命令の三つのオペランド
と同じである(オペランド番号は一ずつ増えている)。

@code{BLKmode} のオブジェクトを返すサブルーチンは @samp{call} insn を
使う。

@cindex @code{call_pop} instruction pattern
@cindex @code{call_value_pop} instruction pattern
@item @samp{call_pop}, @samp{call_value_pop}
@samp{call} や @samp{call_value} と同様だが、
定義されていて、かつ、@code{RETURN_POPS_ARGS} がゼロでない場合に
使われる点が異なる。
これらのパターンは、関数呼び出しとフレームポインタに対してなされた
調整を表す @code{set} の両方を含む @code{parallel} を生成すべきである。

@code{RETURN_POPS_ARGS} がゼロでない値になりうる機種では、
これらのパターンを使うと、望まれている場合には、
フレームポインタを消去可能な関数の数が増えることになる。

@cindex @code{untyped_call} instruction pattern
@item @samp{untyped_call}
任意の型の値を返すサブルーチン呼びだし命令である。
オペランド 0 が呼び出すべき関数、オペランド 1 が関数を呼び出した結果を
格納すべきメモリ位置、オペランド 2 が @code{parallel} 式である。
この @code{parallel} 式の各要素は、関数の戻り値を結果のブロックへ
セーブすることを示す @code{set} 式である。

この命令パターンは、任意個数の引数のサブルーチンを呼び出したり、
戻り値をセーブするのに特別な命令を必要とするマシンで、@code{__builtin_apply}
を動作させるために定義する必要がある。
この命令パターンは、戻り値を保持できるレジスタが複数ある(すなわち、
@code{FUNCTION_VALUE_REGNO_P} が二個以上のレジスタに対して
真である)マシンで必要とされる。

@cindex @code{return} instruction pattern
@item @samp{return}
サブルーチンから戻る命令である。この命令パターン名は、
一個の命令だけで、関数から戻る処理の全てを行なえる場合にのみ
定義するべきである。

@samp{mov@var{m}} パターンと同様、このパターンも RTL 生成以後の
フェーズでも使われる。その場合、関数から戻るのに通常複数の命令が
必要だが、関数のクラスによっては、戻るのに命令を一個しか必要としない
ものもあるような機種を支援するためである。
通常、利用可能な関数は、なんらレジスタをセーブしたり、スタック空間を
割り当てたりする必要がないような関数になる。

@findex reload_completed
@findex leaf_function_p
このような機種については、このパターンで指定された条件は、
@code{reload_completed} がゼロでなく、関数のエピローグがただ一つの命令に
なる場合にのみ真とならなければならない。レジスタウィンドウのある機種に
ついては、@code{leaf_function_p} ルーチンを使って、レジスタウィンドウの
プッシュが必要かどうかを決定することができる。

条件付きリターン命令のある機種では以下のようにパターンを定義すべきである。

@smallexample
(define_insn ""
  [(set (pc)
        (if_then_else (match_operator
                         0 "comparison_operator"
                         [(cc0) (const_int 0)])
                      (return)
                      (pc)))]
  "@var{condition}"
  "@dots{}")
@end smallexample

ここで、@var{condition} は普通は、名前付き @samp{return} パターンで
指定されるのと同じ条件である。

@cindex @code{untyped_return} instruction pattern
@item @samp{untyped_return}
型指定なしのサブルーチンからの復帰命令。この命令パターンは、
任意の型の値を返すのに特別な命令を必要とする機種では、@code{__builtin_return}
をサポートするために定義すべきである。

オペランド 0 は、@code{__builtin_apply} により関数を呼び出した結果が
格納されるメモリ位置である。オペランド 1 は、@code{parallel} 式であり、
この式の各要素はその結果のブロックから関数の戻り値をリストアすることを
指示する @code{set} 式である。

@cindex @code{nop} instruction pattern
@item @samp{nop}
ノップ命令。この命令パターン名は常に定義する必要があり、アセンブラコードで
ノップを出力しなければならない。@code{(const_int 0)} は RTL パターンとして
の役割を果たす。

@cindex @code{indirect_jump} instruction pattern
@item @samp{indirect_jump}
オペランド 0 のアドレスにジャンプする命令。
このパターンは全機種で必須である。

@cindex @code{casesi} instruction pattern
@item @samp{casesi}
ディスパッチテーブルを通してのジャンプ命令であり、範囲チェックを含む。
この命令は次の5つのオペランドを取る。

@enumerate
@item
ディスパッチ先のインデックス。モードは @code{SImode} である。

@item
テーブルのインデックスの下限であり、整数定数である。

@item
テーブルのインデックスの全範囲。最大のインデックスから最小の
インデックスを引いたものである。最大、最小とも範囲に含まれる

@item
テーブル自身に先行するラベル。

@item
インデックスの値が範囲外にあるときにジャンプすべきラベル。
マシン記述マクロ @code{CASE_DROPS_THROUGH} が定義されていると、
範囲外のインデックスの場合は、このラベルにジャンプする代わりに、
ジャンプテーブルに続くコードにそのまま落ちて行く。
その場合、このラベルは @samp{casesi} 命令では実際には使われない。
@end enumerate

このテーブルは、@code{jump_insn} の中の @code{addr_vec} か
@code{addr_diff_vec} である。このテーブルの要素数は、
上限値と下限値の差に 1 を加えたものである。

@cindex @code{tablejump} instruction pattern
@item @samp{tablejump}
可変アドレスにジャンプする命令。これは低レベルの機能であり、
@samp{casesi} パターンがない場合に分岐テーブルを実装するのに
使うことが出来る。

このパターンにはオペランドが二つ必要である。アドレスまたはオフセット、
それとジャンプ表の直前に置くべきラベルである。マクロ
@code{CASE_VECTOR_PC_RELATIVE} を評価した結果ゼロでない値になれば、
最初のオペランドはその表のアドレスからのオフセットである。
定義されていない場合は、ジャンプ先の絶対アドレスである。
どちらの場合も、最初のオペランドのモードは @code{Pmode} である。

@samp{tablejump} insn は、常に、それを使うジャンプ表の前にある最後の
insn になる。このアセンブラコードは普通は第二のオペランドを使う必要が
ないが、それを RTL パターンに取り込むことで 、ジャンプ最適化フェーズが
その表を到達不能コードとして削除しないようにしなければならない。

@cindex @code{canonicalize_funcptr_for_compare} instruction pattern
@item @samp{canonicalize_funcptr_for_compare}
オペランド 1 にある関数ポインタを正規化し、その結果をオペランド 0 に
格納する。

オペランド 0 は常に @code{reg} であり、モードは @code{Pmode} である。
オペランド 1 は、@code{reg}、@code{mem}、@code{symbol_ref}、
@code{const_int} 等であり、モードは @code{Pmode} である。

関数ポインタの正規化には、間接呼び出しの文脈で関数ポインタが
使われた場合呼び出される関数のアドレスを計算することが通常含まれる。

ターゲット機種の関数ポインタが、間接の呼び出しに使われた場合、
値は異なりうるが、呼び出す関数は同じという場合にだけ、このパターンを
定義すること。

@cindex @code{save_stack_block} instruction pattern
@cindex @code{save_stack_function} instruction pattern
@cindex @code{save_stack_nonlocal} instruction pattern
@cindex @code{restore_stack_block} instruction pattern
@cindex @code{restore_stack_function} instruction pattern
@cindex @code{restore_stack_nonlocal} instruction pattern
@item @samp{save_stack_block}
@itemx @samp{save_stack_function}
@itemx @samp{save_stack_nonlocal}
@itemx @samp{restore_stack_block}
@itemx @samp{restore_stack_function}
@itemx @samp{restore_stack_nonlocal}
多くの機種には、モード @code{Pmode} のオブジェクトへ
コピーしたり、あるいはそのオブジェクトからコピーすることで、
スタックポインタをセーブしたり、リストアする。
そういう機種ではこれらのパターンを定義しないこと。

機種によっては、スタックポインタのセーブとリストアには特別な
取扱いが必要なものもある。そういう機種では、非標準のケースに
対応するパターンを、必要とされる insn を生成する @code{define_expand} 
(@pxref{Expander Definitions}) を使って、定義する。
セーブとリストアには以下の三つのタイプがある。

@enumerate
@item
@samp{save_stack_block} は可変長オブジェクトを割当要るブロックの
開始点でのスタックポインタをセーブする。@samp{restore_stack_block} は
そのブロックを抜けた時点でスタックポインタをリストアする。

@item
@samp{save_stack_function} と @samp{restore_stack_function} は、
関数の最も外側のブロックに対して同様の処理を行ない、その関数が
可変長オブジェクトを確保したり、@code{alloca} を呼び出したときに
使われる。リストアされたスタックポインタを使うのは
エピローグだけなので、機種によってはセーブやリストアの命令列が
簡単になる。

@item
@samp{save_stack_nonlocal} は、ネストした関数から分岐してくるラベルを
含む関数の中で使われる。これは、内側の関数が
@samp{resotre_stack_nonlocal} を使ってスタックポインタをリストアできるよう
な方法で、スタックポインタをセーブする。
GCC はフレームポインタと引数ポインタのレジスタをリストアするコードを
生成するが、機種によっては、その他に、例えば、レジスタウィンドウ情報や
スタックのバックチェーンのようなデータをセーブ、リストアする必要が
あるものがある。これらのパターンに insn を置いて、そういう必要なデータを
セーブ、リストアする。
@end enumerate

スタックポインタをセーブするときは、オペランド 0 がセーブ領域であり、
オペランド 1 がスタックポインタである。セーブ領域を確保するのに使う
モードはデフォルトでは @code{VOIDmode} になるが、マクロ
@code{STACK_SAVEAREA_MODE} (@pxref{Storage Layout}) を定義することで
上書きできる。整数モードか、あるいは、
特定のタイプのセーブの場合はセーブ領域がひつようでない場合は
@code{VOIDmode} を指定しなければならない。
リストアの場合は、オペランド 0 がスタックポインタで、オペランド 1 が
セーブ領域である。@samp{save_stack_block} が定義されているなら、
オペランド 0 は @code{VOIDmode} であってはならない。こういうセーブは
好きなだけ重ねられるからである。

セーブ領域は、スタックポインタが非局所 goto で使うために
セーブされるときは、ある @code{mem} であり、@code{virtual_stack_vars_rtx}
から一定のオフセットにある。
他の二つの場合は、@code{reg} である。

@cindex @code{allocate_stack} instruction pattern
@item @samp{allocate_stack}
オペランド 1 をスタックポインタから減算(@code{STACK_GROWS_DOWNWARD} が
定義されていれば加算)することで、動的に確保するデータ用のスペースを作る。

このスペースを指す、減算(あるいは加算)後のポインタをオペランド 0 に
格納する。主スタックからスペースを割り当てているなら、これは
@code{virtual_stack_dynamic_rtx} をオペランド 0 にコピーする移動命令を
生成することで行なうこと。その他の場所からスペースを割り当てている場合は、
スペースのその位置をオペランド 0 にコピーするコードを生成すること。
後者の場合、主スタック上の対応するスペースが解放された
時に、このスペースが解放されることを保証しなければならない。

やらなければならないことがこの減算だけであるならこのパターンは定義しないこと。
機種によっては、その他の、スタック探針やバックチェーンの維持等の
操作を必要とするものがある。その場合には、このパターンで、
スタックポインタの更新に加えてそれらの操作を生成するように定義する。

@cindex @code{probe} instruction pattern
@item @samp{probe}
機種によっては、スタックからスペースを割り当てた後に実行すべき
命令を必要とする場合がある。例えば、スタックの基底への参照を
生成するためである。

スタックの調整が完了するまえに命令群を出す必要があるなら、
その命令群を @samp{allocate_stack} パターンに入れるようにする。
その必要がなければ、@samp{probe} パターンが必要な命令を出すように
定義する。

オペランドはない。

@cindex @code{check_stack} instruction pattern
@item @samp{check_stack}
スタック検査を行なうのに、ロード命令あるいはストア命令を使って
スタックを探査する方法(@pxref{Stack Checking})が使えないシステムでは、
このパターンを定義して、必要な検査を行ない、スタックがオーバーフロー
したなら、エラーを発するようにする。オペランドは一つで、
検査する必要のある現在のスタックポインタから最も遠いスタック上の
位置である。このパターンが必要な機種では、普通、スタックの限界は、
グローバルまたスレッド固有である、変数またはレジスタから得ることになる。

@cindex @code{nonlocal_goto} instruction pattern
@item @samp{nonlocal_goto}
非局所 goto すなわち、ある関数から外側の関数中のラベルへのジャンプを
生成するコードを出す。このパターンには引数が四つあり、
それぞれがジャンプで使われる値を表す。先頭の引数は、フレームポインタに
ロードされる、二番目の引数は、分岐先アドレス(実際のラベルへディスパッチする
コード)である。三番目は、スタックがセーブされる位置のアドレスであり、
最後の引数は、ラベルのアドレスであり、入力静的連鎖の位置に置かれる
ものである。

ほとんどの機種ではこのパターンを定義する必要がない。GNU CC が
既に正しいコードを生成しているからである。この正しいコードでは、
フレームポインタと静的連鎖をロードし、スタックをリストアし
(定義されていれば @samp{restore_stack_nonlocal} パターンを使って)、
ディスパッチ部へ間接的にジャンプする。このコードでは正しく動作しない
機種の場合だけ、このパターンを自分で定義する必要がある。

@cindex @code{nonlocal_goto_receiver} instruction pattern
@item @samp{nonlocal_goto_receiver}
このパターンは、定義されていれば、非局所 goto の飛び先に GNU CC が
生成済みのコードの後で必要なコードが入っている。
普通はこのパターンを定義する必要はない。
このパターンが必要な理由の典型的なものは、ある値、例えばグローバルな
表へのポインタのようなものが、フレームポインタがリストアされたときに
リストアされなくてはならない場合である。
非局所 goto は翻訳単位内でしか起こらないので、指定されたモジュールの
全ての関数により共有されるグローバル・テーブル・ポインタを
リストアする必要はない。引数はない。

@cindex @code{exception_receiver} instruction pattern
@item @samp{exception_receiver}
このパターンは、定義されていれば、非局所 goto の位置には必要ないが、
例外ハンドラの位置では必要とされるコードが入っている。
普通はこのパターンを定義する必要はない。
このパターンが必要な理由の典型的なものは、ある値、例えばグローバルな
表へのポインタのようなものが、制御の流れが例外ハンドラに分岐した後で
リストアされなくてはならない場合である。引数はない。

@cindex @code{builtin_setjmp_setup} instruction pattern
@item @samp{builtin_setjmp_setup}
このパターンは、定義されていれば、@code{jmp_buf} を初期化するのに
必要な追加のコードを保持している。普通は、このパターンを定義する必要は
ない。このパターンが必要になる代表的な理由としては、何かの値、
例えばグローバル変数テーブルへのポインタのような値がリストア
する必要がある場合である。そのようなポインタ値は可能な限り
(例えばラベルのアドレスが与えられているような場合)再計算するのが
望ましいのではあるが。引数は一つであり、@code{jmp_buf} へのポインタである。
このバッファは 5語長であり、最初の 3語分は普通は汎用的な機構が
使うことに注意。

@cindex @code{builtin_setjmp_receiver} instruction pattern
@item @samp{builtin_setjmp_receiver}
このパターンは、定義されていれば、非局所 goto の位置には必要ないが、
組み込みの setjmp の位置では必要とされるコードが入っている。
普通はこのパターンを定義する必要はない。
このパターンが必要な理由の典型的なものは、ある値、例えばグローバルな
表へのポインタのようなものが、リストアされなくてはならない場合である。
これは引数を一つ取る。それは制御を渡してきた @code{builtin_longjmp} に
付くラベルである。このパターンはそのラベルから小さなオフセット分だけ
後に生成される。

@cindex @code{builtin_longjmp} instruction pattern
@item @samp{builtin_longjmp}
このパターンは、定義されていれば、longjmp の全動作を実行する。
@code{builtin_setjmp_setup} も定義しているのでない限り、普通は
このパターンを定義する必要はない。引数は一個で、@code{jmp_buf} への
ポインタである。

@cindex @code{eh_epilogue} instruction pattern
@item @samp{eh_epilogue}
このパターンは、@code{__builtin_eh_return}、それに伴って @code{__throw}
の構築方法に影響を与える。例外処理機構とそのターゲット向けの通常の
エピローグコードとの間の通信を可能にすることを意図している。

このパターンには引数が三つある。一番目は、例外今テキストポインタである。
これは、ポインタに適した関数戻りレジスタに既にコピーされているであろう。
普通はこれを無視出来る。二番目の引数は、スタックポインタに加算すべき
オフセットである。これはある勝手な呼出し時破壊ハードレジスタに
コピーされるので、再ロード後、通常のエピローグが生成される間での
間生き残る。三番目の引数は、この関数が戻るべき例外ハンドラの
アドレスである。これは通常、このパターンによりある特別なレジスタに
コピーされる必要がある。

このパターンは、もし @code{RETURN_ADDR_RTX} が、何か信頼性があり
永久的な修正が可能であるもの、例えば固定ハードレジスタやスタックメモリ
参照のようなものを生み出さない場合は、定義しなければならない。

@cindex @code{prologue} instruction pattern
@item @samp{prologue}
このパターンが定義されていると、関数の入り口点に対する RTL を生成する。
関数の入り口点には、スタックフレームの設定、フレームポインタレジスタの
初期化、被呼出し側セーブレジスタのセーブ等の役割がある。

@code{prologue} パターンの方が、@code{FUNCTION_PROLOGUE} を
定義するよりも、プロローグ用アセンブリ・コードを
生成する方法として一般に望ましい。

@code{prologue} パターンは、命令スケジューリングを行うターゲットには
特に有効である。

@cindex @code{epilogue} instruction pattern
@item @samp{epilogue}
このパターンが定義されていると、関数の出口点に対する RTL を生成する。
関数の出口点には、スタックフレームの解放、
被呼出し側セーブレジスタのリストア、リターン命令の生成等の役割がある。

@code{epilogue} パターンの方が、@code{FUNCTION_EPILOGUE} を
定義するよりも、エピローグ用アセンブリ・コードを
生成する方法として一般に望ましい。

@code{prologue} パターンは、命令スケジューリングを行ったり、
リターン命令に遅延スロットが伴うターゲットには特に有効である。

@cindex @code{sibcall_epilogue} instruction pattern
@item @samp{sibcall_epilogue}
このパターンが定義されていると、最終的に呼出し元関数へ分岐して戻らない
関数の出口点に対する RTL を生成する。
このパターンは、任意の同族呼出し(別名末尾呼出し)位置の前に生成される。

@code{sibcall_epilogue} パターンは、パラメータの受渡しに使われる引数や
現在の関数に渡された引数用のスタックスロットはどれも破壊してはならない。
@end table

@end ifset
@c Each of the following nodes are wrapped in separate
@c "@ifset INTERNALS" to work around memory limits for the default
@c configuration in older tetex distributions.  Known to not work:
@c tetex-1.0.7, known to work: tetex-2.0.2.
@ifset INTERNALS
@node Pattern Ordering
@section When the Order of Patterns Matters
@cindex Pattern Ordering
@cindex Ordering of Patterns

ある insn が複数の命令パターンにマッチ可能なことが時々ある。
その時は、マシン記述に最初に現れるパターンが使われる。
このため、より限定されるパターン(マッチするものがより少ないパターン)や
より高速のパターン(マッチしたときにより良いコードを生成するパターン)を
通常はマシン記述で先に置くべきである。

場合によっては、パターンの順番の効果を使って、有効でないパターンを
隠すこともできる。
例えば、68000 は、フルワードを浮動小数点に変換する命令と
もう一つ別のバイトを浮動小数点に変換する命令を持っている。
整数を浮動小数点に変換する命令はどちらにもマッチし得る。
我々は、フルワードを変換するパターンを先において、バイトを変換する
パターンではなくてフルワードを変換する方が使われることを保証している。
(そうしないと、大きな整数が一バイトの即値量として生成されてしまい、
動作しなくなる。)
このパターンの順序を使う代わりに、バイトを変換するパターンを
任意の定数値を適切に扱えるように賢いものにすることも可能である。

@end ifset
@ifset INTERNALS
@node Dependent Patterns
@section Interdependence of Patterns
@cindex Dependent Patterns
@cindex Interdependence of Patterns

どのマシン記述でも、条件分岐名 @samp{b@var{cond}} のそれぞれに
ついて名前付きパターンがなければならない。
この場合、許されるテンプレートは常に以下の形でなければならない。

@example
(set (pc)
     (if_then_else (@var{cond} (cc0) (const_int 0))
                   (label_ref (match_operand 0 "" ""))
                   (pc)))
@end example

@noindent
さらに、どのマシン記述でも、条件を逆にした分岐毎に名無しのパターンが
なければならない。
テンプレートは以下の形となる。

@example
(set (pc)
     (if_then_else (@var{cond} (cc0) (const_int 0))
                   (pc)
                   (label_ref (match_operand 0 "" ""))))
@end example

@noindent
これらが必要なのは、ジャンプ最適化で順条件分岐が逆条件分岐に
変換されることがあるためである。

@code{match_operator} を使って、分岐に対し指定しなければならない
パターンの数を押さえるということを良く行なう。
例えば、以下のようにする。

@smallexample
(define_insn ""
  [(set (pc)
        (if_then_else (match_operator 0 "comparison_operator"
                                      [(cc0) (const_int 0)])
                      (pc)
                      (label_ref (match_operand 1 "" ""))))]
  "@var{condition}"
  "@dots{}")
@end smallexample

場合によっては、一個以上のオペランドのマシンモードを除けば同じになる命令を
サポートしている機種がある。例えば、
``sign-extend halfword'' と ``sign-extend byte'' という命令があり、
そのパターンは以下のようになる。

@smallexample
(set (match_operand:SI 0 @dots{})
     (extend:SI (match_operand:HI 1 @dots{})))

(set (match_operand:SI 0 @dots{})
     (extend:SI (match_operand:QI 1 @dots{})))
@end smallexample

@noindent
整数定数はマシンモードを指定しないので、定数値を拡張する命令は
どちらのパターンにもマッチし得る。
実際にマッチするパターンは、ファイルで先に現れたものになる。
正しい結果を得るためには、先に置くのは最も幅の広いモード(ここでは 
@code{HImode}) のものでなければならない。
パターンが @code{QImode} の命令にマッチした場合、
定数値がこのモードに実際に収まらない場合は正しくない結果になる。

定数を拡張するような命令は最適化の際になくなるので、滅多に生成される
ことはないが、最適化をしないコンパイルでは時々出てくる。

あるパターンのある制約が定数を許すなら、再ロードパスが、いくつかのケースの
制約で許されているなら、レジスタを定数で置き換える可能性がある。
メモリ参照についても同様である。
この置き換えがあるので、インクリメントとデクリメント命令に別々の
パターンを与えるべきではない。
代わりに、同一のパターンから生成されるようにする必要がある。
このパターンは、オペランドを調べて適切な機械命令を生成するような
レジスタ同士の加算 insn をサポートする必要がある。

@end ifset
@ifset INTERNALS
@node Jump Patterns
@section Defining Jump Instruction Patterns
@cindex jump instruction patterns
@cindex defining jump instruction patterns

ほとんどの機種について、GNU CC は、その機種に条件コードがあることを
想定している。比較 insn が条件コードを設定し、与えられたオペランドに
ついての、符号付き比較と符号なし比較の両方の結果を記録する。
それとは別の分岐 insn が、条件コードをテストし、その値にしたがって
分岐したり、しなかったりする。
分岐 insn は、符号付きと符号無しでは違ってくる。
良く知られた機種、例えば、Vax や 68000、32000 等はこのように
動作する。

機種によっては、符号付きと符号なしで別の比較命令を持っているが、
条件分岐命令は、どちらか一方向けのセットしかないというものがある。
こういう機種を扱うのに一番簡単な方法は、アセンブリコードが書き出される
最後の段階までは、それ以外の機種と全く同じように扱うことである。
この最後の段階で、比較命令用のコードを出力するときに、
@code{next_cc0_user (insn)} を使って後続の分岐を先読みするのである。
(変数 @code{insn} は、ある命令パターンの出力を書き出すコードの中では、
出力中の insn を参照している。)
その RTL を見て、符号なし分岐であれば、符号なし比較を出力し、
さもなければ符号付き比較を出力する。その分岐自体を出力するときは、
符号付き分岐と符号なし分岐を全く同一に扱うことができる。

こんなことが可能なのは、GNU CC が連続する RTL insn の対を生成するからである。
間に @code{note} insn が入ってもよい。この対の一つは、条件コードを
設定し、もう一つがそれをテストする。GNU CC は、この対を最後まで
いじらないようにする。

この方法を取るには、マシン記述マクロ @code{NOTICE_UPDATE_CC} を
@code{CC_STATUS_INIT} を実行するように定義しなければならない。
言い換えると、余計な比較命令はない。

機種によっては比較-分岐命令はあるが、条件コードはないというものがある。
こういう機種についても同様の方法が使える。
比較命令を「出力」すべき時が来たら、そのオペランドを二つの静的変数に
記録する。次に続く「条件コードにより分岐」命令を出力するときは、
実際には記録したオペランドを使う、比較-分岐命令を出力する。

比較-分岐命令向けにパターンを定義するのでも良い。
最適化ありのコンパイルでは、比較命令と分岐命令の組をこのパターンに
従って組み合わせる。だが、これは最適化を要求しない場合は
行なわれない。このため、読者が定義するなんらかの特別なパターンに加えて、
上記の解決策の一つを取る必要がある。

RISC 機種の多くでは、条件コードに影響する命令はほとんどなく、
独立した条件コードレジスタさえないこともある。
こういう機種では、条件コードの定義と使用は連続した insn でなければ
ならないという制限は必要ないし、重要な最適化を妨げてしまう。
例えば、IBM RS/6000 では、条件コードレジスタが条件分岐の
三つ前の命令で設定されていない限り、成立した分岐に対して遅延が
生じる。
条件コードレジスタの定義と使い方を分離することが許されていないと、
命令スケジューラは、この最適化を行なうことができない。

こういう機種では、@code{(cc0)} を使わず、代わりに
条件コードを表すレジスタを使うこと。専用の条件コードレジスタが
存在する場合には、ハードレジスタを使うこと。
条件コードや比較の結果をどの汎用レジスタにでも置くことが出来るのなら、
あるいは条件コードレジスタが複数あるなら、疑似レジスタを使うこと。

@findex prev_cc0_setter
@findex next_cc0_user
機種によっては、生成される分岐命令のタイプは条件コードの生成のされ方に
依存する。例えば、68k と SPARC では、加算命令や減算命令で
直接的に条件コードを設定すると、テスト命令が行なうような、オーバフロー
ビットのクリアを行なわないので、ある種の条件分岐に対しては
異なる分岐命令を使う必要がある。@code{(cc0)} を使う機種では、
条件コードの設定と使用は、連続して置かなければならず(間に
置いて良いのは @code{note} insn だけ)、@code{cc_status} 中のフラグを
使えるようにしなければならない。(@xref{Condition Code}。)
また、比較 insn と分岐 insn は、関数 @code{prev_cc0_setter} と
@code{next_cc0_user} によってお互いを見つけることができる。

だが、@code{(cc0)} を使わない機種ではこの事は正しくない。
@code{(cc0)} を使わない機種では、比較 insn と分岐 insn が連続しているという
仮定を置くことは出来ず、上記の方法は使えない。
代わりに、条件コードレジスタのマシンモードを使って、条件コードレジスタの
異なる形式を記録するようにする。

条件コードの値をストアするのに使うレジスタのモードは、クラス @code{MODE_CC}
のモードでなければならない。普通は、@code{CCmode} になる。
他にモードが必要になる場合は(上で述べた、Sparc の add の例について言えば)、
マクロ @code{EXTRA_CC_MODES} を
定義して、追加で必要なモードを列挙する(@pxref{Condition Code})。
また、@code{EXTRA_CC_NAMES} を定義して、追加するモードの名前を列挙し、
@code{SELECT_CC_MODE} を定義して、比較のオペランドに与えられたモードを
選択するようにする。

RTL 生成の間、異なるモードが必要な事が判っている場合
(例えば、IBM のほとんどのプロセッサのように、符号付きと符号なしで
別々の比較命令を持っている機種の場合である)、RTL 生成時に
指定することができる。

異なるモードが要求されるのが、命令組合せにより発生する場合は、
マクロ @code{SELECT_CC_MODE} が比較の結果に対してどのマシンモードを
使うべきかを決定する。そのパターンはこのモードを使って書く必要がある。
上で議論した SPARC での加算の場合を考えると、パターンを以下のように
する必要がある。

@smallexample
(define_insn ""
  [(set (reg:CC_NOOV 0)
        (compare:CC_NOOV
          (plus:SI (match_operand:SI 0 "register_operand" "%r")
                   (match_operand:SI 1 "arith_operand" "rI"))
          (const_int 0)))]
  ""
  "@dots{}")
@end smallexample

SPARC での @code{SELECT_CC_MODE} マクロは、引数が @code{plus} である
比較に対しては @code{CC_NOOVmode} を返す。

@end ifset
@ifset INTERNALS
@node Insn Canonicalizations
@section Canonicalization of Instructions
@cindex canonicalization of instructions
@cindex insn canonicalization

複数の RTL 式がある一個の機械命令で実行される演算を表す場合が良くある。
これは、論理命令、分岐命令、積和命令で良くあることである。
そういう場合、コンパイラは複数の RTL 式を一個の正規形に変換して、
必要とする insn パターンの数を減らそうとする。

代数的な単純化に加えて、以下の正規化が行なわれる。

@itemize @bullet
@item
交換可能な比較演算の場合、定数は常に第二オペランドとなる。
定数を第二オペランドでしか使えない機種では、第二オペランドに定数が
くるパターンだけを提供すれば良い。

@cindex @code{neg}, canonicalization of
@cindex @code{not}, canonicalization of
@cindex @code{mult}, canonicalization of
@cindex @code{plus}, canonicalization of
@cindex @code{minus}, canonicalization of
以下の演算については、一方のオペランドだけが @code{neg}、@code{not}、
@code{mult}、@code{plus}、@code{minus} 式の場合、それは第一の
オペランドになる。

@cindex @code{compare}, canonicalization of
@item
@code{compare} 演算子の場合、@code{cc0} が使われる機種(@pxref{Jump Patterns})
では、定数は常に第二オペランドになる。それ以外の機種では、定数を
第一オペランドとする @code{compare} をコンパイラが作ろうとする
場合が希にある。だが、そういう場合は、実際にそういう機械命令が
ない限り、第一オペランドとして定数にマッチするパターンを用意する
価値があるほど多くはない。

@code{neg}、@code{not}、@code{mult}、@code{plus}、
@code{minus} のオペランドは、上と同じ条件下で第一オペランドになる。

@item
@code{(minus @var{x} (const_int @var{n}))} は
@code{(plus @var{x} (const_int @var{-n}))} に変換される。

@item
アドレスの計算の中で(すなわち、@code{mem} の中で)、左シフトは
適当な 2 の冪乗の乗算に変換される。

@cindex @code{ior}, canonicalization of
@cindex @code{and}, canonicalization of
@cindex De Morgan's law
@item
ド・モルガンの法則を使って、ビット毎の論理積や論理和の中にある
ビット毎の否定を移動する。この結果、一個のオペランドだけが
@code{not} 式になった場合、それが先頭のオペランドになる。

一つのオペランドと、もう一方のオペランドのビット毎の否定のビット毎の論理積を
実行する命令がある機種では、その命令用のパターンは以下のように指定すべき
である。

@smallexample
(define_insn ""
  [(set (match_operand:@var{m} 0 @dots{})
        (and:@var{m} (not:@var{m} (match_operand:@var{m} 1 @dots{}))
                     (match_operand:@var{m} 2 @dots{})))]
  "@dots{}"
  "@dots{}")
@end smallexample

@noindent
同様に、``NAND'' 命令用のパターンは以下のように書くべきである。

@smallexample
(define_insn ""
  [(set (match_operand:@var{m} 0 @dots{})
        (ior:@var{m} (not:@var{m} (match_operand:@var{m} 1 @dots{}))
                     (not:@var{m} (match_operand:@var{m} 2 @dots{}))))]
  "@dots{}"
  "@dots{}")
@end smallexample

どちらの場合にも、たくさんある論理的に等価な RTL 式に対するパターンを
含める必要はない。

@cindex @code{xor}, canonicalization of
@item
ビット毎の排他的論理和とビット毎の否定を両方含む RTL 式で
可能なものは、@code{(xor:@var{m} @var{x} @var{y})} と
@code{(not:@var{m} (xor:@var{m} @var{x} @var{y}))}
だけである。@refill

@item
三項の和で、その一つが定数であるものは、次の形にしか現れない。

@smallexample
(plus:@var{m} (plus:@var{m} @var{x} @var{y}) @var{constant})
@end smallexample

@item
@code{cc0} を使わない機種では、@code{(compare @var{x} (const_int 0))} は
@var{x} に変換される。@refill

@cindex @code{zero_extract}, canonicalization of
@cindex @code{sign_extract}, canonicalization of
@item
あるグループのビット(普通は一個のビット)がゼロに等しいかどうかの
比較は、等価な @code{and} や @code{sign_extract} 演算ではなくて、
@code{zero_extract} を使って書かれる。

@end itemize
@end ifset
@ifset INTERNALS
@node Expander Definitions
@section Defining RTL Sequences for Code Generation
@cindex expander definitions
@cindex code generation RTL sequences
@cindex defining RTL sequences for code generation

機種によっては、RTL 生成用の標準のパターン名を一個の insn では
扱えないが、RTL insn の列なら表現できるという場合がある。
そのようなターゲット機種の場合は、@code{define_expand} を
書くことでその RTL 列を生成する方法を指定することができる。

@findex define_expand
@code{define_expand} は、ある一個の RTL 式であり、
ほぼ @code{define_insn} と同じである。
しかし、@code{define_expand} は、@code{define_insn} と違って、
RTL 生成にのみ使われ、一個以上の RTL insn を生成することができる。

@code{define_expand} RTX にはオペランドが4つある。

@itemize @bullet
@item
名前。各 @code{define_expand} には名前がなければならない。
何故なら、名前で参照するのが唯一の使い方だからである。

@findex define_peephole
@item
RTL テンプレート。これは、ちょうど @code{define_peephole} の
RTL テンプレートと同じであり、それぞれが一個の insn である
RTL 式のベクトルになっている。

@item
条件。C の式を一個含む一個の文字列である。
この式を使って、このパターンの利用可能性がどのようにターゲット機種の
サブクラスに依存するかを表す。このサブクラスは、GNU CC の実行時に
コマンド行オプションにより選択されるものである。
これは、標準名を持つ @code{define_insn} の条件と同じである。
このため、条件がもしあるなら、一致する insn 中のデータに
依存してはならない。ターゲット機種タイプのフラグにしか依存しては
ならないのである。GNU CC は、初期化を行なっている際にこれらの
条件をテストする必要がある。これは、コンパイラの一回実行する毎に、
名前付き命令で利用可能なものはどれかを正確に知る必要があるからである。

@item
準備文。一個の文字列であり、ゼロ個以上の C の文を含む。
これらの文は、RTL テンプレートから RTL コードが生成される前に
実行される。

普通これらの文は、RTL テンプレート中の内部的なオペランドとして
使われる一時レジスタを用意するが、@code{emit_insn} 等のルーチンを
呼び出すことで RTL insn を直接生成することもできる。
そうやって生成した insn は、RTL テンプレートから来る insn の前に
置かなければならない。
@end itemize

@code{define_expand} により生成されるRTL insn はどれも、マシン記述中の
@code{define_insn} のどれかにマッチしなければならない。
どれにもマッチしない場合、その insn 用のコードを生成しようとしたり、
最適化しようとしたときに異常終了してしまう。

RTL テンプレートは、RTL insn の生成を制御することに加えて、
このパターンが使われるときに指定する必要があるオペランドをも
記述する。
特に、各オペランドに述語を与える。

真のオペランドは、パターンから RTL を生成するために指定する必要があり、
RTL テンプレートの先頭に現れる @code{match_operand} で記述する
必要がある。これにより、オペランドの述語についての情報が、その手の情報を
記録する表に入力される。GNU CC はこの情報を使って、正しい RTL コードとして
必要なら、オペランドをレジスタに事前ロードする。
このオペランドが複数回参照されているなら、それ以降で参照するときは
@code{match_dup} を使う必要がある。

RTL テンプレートは、内部「オペランド」も参照する。
内部オペランドとは、一時レジスタやラベルであり、@code{define_expand} で
作られる列の中でしか使われない。内部オペランドは、@code{match_dup} に
より RTL テンプレートに代入される。@code{match_operand} で代入される
ことはない。内部オペランドの値は、GNU CC がこのパターンを使う必要が
あるときに引数として渡されることはない。代わりに、
準備文により、パターン内で計算が行なわれる。準備文は、
値を計算し、@code{operands} の適切な要素に格納するので、
@code{match_dup} がそれを見つけられるようになる。

準備文の中で使う特別なマクロが二つ定義されている。
@code{DONE} と @code{FAIL} である。これらは後ろにセミコロンを付けて
文として使うこと。

@table @code

@findex DONE
@item DONE
マクロ @code{DONE} を使って、このパターンに対する RTL 生成を終了させる。
この時にパターンから作られる RTL insn は、準備文の中で @code{emit_insn}
を明示的に呼び出すことによって既に出力済みのものだけになる。
RTL テンプレートは生成されない。

@findex FAIL
@item FAIL
パターンに対する照合を失敗させる。あるパターンが照合に失敗すると、
そのパターンが利用できないことを意味する。
GNU CC の呼びだし側ルーチンは、他のパターンを使って、コード生成の
別の戦略を試す。

失敗は、現在、二項演算(加算、乗算、シフト等)とビットフィールド演算
(@code{extv}、@code{extzv}、@code{insv})でのみ使える。
@end table

次の例は、SPUR チップの左シフトの定義である。

@smallexample
@group
(define_expand "ashlsi3"
  [(set (match_operand:SI 0 "register_operand" "")
        (ashift:SI
@end group
@group
          (match_operand:SI 1 "register_operand" "")
          (match_operand:SI 2 "nonmemory_operand" "")))]
  ""
  "
@end group
@end smallexample

@smallexample
@group
@{
  if (GET_CODE (operands[2]) != CONST_INT
      || (unsigned) INTVAL (operands[2]) > 3)
    FAIL;
@}")
@end group
@end smallexample

@noindent
この例では、@code{define_expand} を使って、
シフト量がサポート範囲の 0 から 3 の間に収まっていればシフトを行なう
RTL insn を生成することができるようにしているが、機械命令が使えない
ようなそれ以外の場合には失敗するようにしている。
失敗した場合には、別のパターン(例えば、ライブラリ呼びだしなど)を使った
別の戦略を試みる。

GNU CC が、名前付きパターンの自明でない条件文字列を扱うことが
出来たなら、@code{define_insn} をその場合に使うことができる。
以下に、@code{define_expand} の威力をさらに利用する別の例(68000 での
ゼロ拡張である)を示す。

@smallexample
(define_expand "zero_extendhisi2"
  [(set (match_operand:SI 0 "general_operand" "")
        (const_int 0))
   (set (strict_low_part
          (subreg:HI
            (match_dup 0)
            0))
        (match_operand:HI 1 "general_operand" ""))]
  ""
  "operands[1] = make_safe_from (operands[1], operands[0]);")
@end smallexample

@noindent
@findex make_safe_from
ここでは二つの RTL insn が生成される。一つは出力オペランド全体を
クリアし、もう一つは入力オペランドを出力オペランドの下位半分に
コピーする。この insn 列は、入力オペランドが出力オペランド(の
古い値)を参照している場合は、正しくなくなる。
そのため、準備文でそうならないことを保証している。
関数 @code{make_safe_from} は、@code{operands[1]} が
@code{operands[0]} を参照していれば、@code{operands[1]} を
一時レジスタにコピーする。そのコピーは、もう一つの RTL insn を
生成することにより行なう。

最後に、三番目の例で内部オペランドの使い方を説明する。
SPUR チップのゼロ拡張は、結果を半語のマスクとの @code{and} を取ることで
行なわれる。
だが、このマスクは、定数値としては、この機種で正しいものになるには大きすぎて、
@code{const_int} では表現できない。このため、@code{force_reg} で
レジスタにコピーして、そのレジスタを @code{and} の中で使わなければ
ならない。

@smallexample
(define_expand "zero_extendhisi2"
  [(set (match_operand:SI 0 "register_operand" "")
        (and:SI (subreg:SI
                  (match_operand:HI 1 "register_operand" "")
                  0)
                (match_dup 2)))]
  ""
  "operands[2]
     = force_reg (SImode, GEN_INT (65535)); ")
@end smallexample

@strong{注意:} @code{define_expand} を標準的な二項演算や単項演算、
あるいはビットフィールド演算に使うときは、それが最後に生成する insn は、
@code{code_label} や @code{barrier} や @code{note} であってはならない。
@code{insn} か @code{jump_insn} か @code{call_insn} でなくてはならない。
最後に実際の insn を置く必要がなければ、演算の結果を自分自身にコピーする
insn を生成する。そういう insn はコードはなんら生成しないが、
GCC に問題が起きるのを回避する。

@end ifset
@ifset INTERNALS
@node Insn Splitting
@section Defining How to Split Instructions
@cindex insn splitting
@cindex instruction splitting
@cindex splitting instructions

あるパターンを複数の insn に分割する方法を指定しなければならない場合が
二つある。遅延スロット(@pxref{Delay Slots})を必要とする命令や
出力が複数サイクルの間利用できない命令(@pxref{Function Units})を
持つ機種では、これらのケースを最適化するコンパイラフェーズでは、
insn を一つの命令の遅延スロットに移動できる必要がある。しかし、
insn の中には複数の機械命令を生成するものもある。そういう insn は
遅延スロットに置くことはできない。

一個の insn を個々の insn のリストに書き直せることが多い。
この場合、個々の insn はそれぞれ一個の機械命令に対応する。
こうすると不利な点は、コンパイルが遅くなり、必要とするメモリスペースが
多くなることである。書き換え後の insn が複雑過ぎると、そのために
いくつかの最適化を妨げることにもなる。命令スケジューリングまたは
遅延スロットスケジューリングが改善されると信じる根拠がある場合は、
コンパイラは insn を分割する。

insn の組合せフェーズでは、交換可能な insn の分割も行なう。
三つの insn が複雑な式の一つの insn に統合されたものの、
なんらかの @code{define_insn} パターンにマッチすることが
不可能になった場合、組合せフェーズは複雑なパターンを認識できる
二つの insn に分割しようとする。普通は、複雑なパターンを
いくつかの部分式に分割することで二つのパターンに分ける。
だが、場合によっては、RISC 機種で、ある大きな定数の加算を二つの insn で
行なうような場合、その加算を二つの insn に分割する方法は
機種依存である。

@cindex define_split
@code{define_split} の定義で、GNU CC に対し、複雑な insn をいくつかの
もっと単純な insn に分割する方法を指定する。

@smallexample
(define_split
  [@var{insn-pattern}]
  "@var{condition}"
  [@var{new-insn-pattern-1}
   @var{new-insn-pattern-2}
   @dots{}]
  "@var{preparation statements}")
@end smallexample

@var{insn-pattern} は、分割する必要のあるパターンであり、
@var{condtion} は @code{define_insn} の場合と同様、
最後にテストされる条件である。@var{insn-pattern} にマッチし、
@var{condition} を満たす insn が見つかると、
その insn は、insn のリストの中で、@var{new-insn-pattern-1}、
@var{new-insn-pattern-2} 等で与えられるinsn に置き換えられる。

@var{preparation statements} は、@code{define_expand} (
@pxref{Expander Definitions})で指定される文と同様のもので、
生成されるコードの準備をしたり、パターンが固定していない insn を
いくつか生成したりするために、新しい RTL が生成される前に実行される。
ただし、@code{define_expand} にあるものと違って、これらの文は
疑似レジスタを新たに生成してはならない。
また、再ロードが一度完了したら、スタックフレームからスペースを
割り当ててはならない。

パターンが @var{insn-pattern} とマッチするのには、二つの異なる状況がある。
ある insn が遅延スロットスケジューリングや命令スケジューリング向けに
分割する必要がある場合は、その insn は有効であることが既に知られている。
この事は、何かの @code{define_insn} にマッチしていなければならず、
@code{reload_completed} がゼロでなければ、その @code{define_insn} の
制約を満たすことが知られているということを意味する。その場合、
新しい insn パターンも何かの @code{define_insn} にマッチしなければならず、
@code{reload_completed} がゼロでなければ、その定義の制約を満たさなければ
ならない。

この @code{define_split} の使い方の例として、@file{a29k.md} から
取った以下の例を考えてみる。この例では、@code{HImode} から @code{SImode}
への @code{sign_extend} を二つのシフト insn の対に分割している。

@smallexample
(define_split
  [(set (match_operand:SI 0 "gen_reg_operand" "")
        (sign_extend:SI (match_operand:HI 1 "gen_reg_operand" "")))]
  ""
  [(set (match_dup 0)
        (ashift:SI (match_dup 1)
                   (const_int 16)))
   (set (match_dup 0)
        (ashiftrt:SI (match_dup 0)
                     (const_int 16)))]
  "
@{ operands[1] = gen_lowpart (SImode, operands[1]); @}")
@end smallexample

命令組合せ過程が insn パターンを分割しようとするのは、いつでも、
そのパターンがどの @code{define_insn} にもマッチ@emph{しない}場合
である。組合せ過程は、最初に一個の @code{set} 式を分割しようとし、
次に @code{parallel} の中にあるが、スクラッチレジスタとして使うための
疑似レジスタの @code{clobber} が後ろに続くような、同じ @code{set} 式を
分割する。
これらの場合、組合せ過程は、新しい insn パターンがちょうど二つ
生成されることを想定する。組合せ過程がこれらのパターンが
なんらかの @code{define_insn} による定義にマッチするかどうかを
検査するので、読者が自分で @code{define_split} の中でこの検査を
行なう必要はない(当たり前だが、マッチする insn を決して
生成しないように @code{define_split} を書くのは意味がない)。

以下に @code{define_split} のこの使い方の例を示す。@file{rs6000.md}
から取ったものである。

@smallexample
(define_split
  [(set (match_operand:SI 0 "gen_reg_operand" "")
        (plus:SI (match_operand:SI 1 "gen_reg_operand" "")
                 (match_operand:SI 2 "non_add_cint_operand" "")))]
  ""
  [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 3)))
   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]
"
@{
  int low = INTVAL (operands[2]) & 0xffff;
  int high = (unsigned) INTVAL (operands[2]) >> 16;

  if (low & 0x8000)
    high++, low |= 0xffff0000;

  operands[3] = GEN_INT (high << 16);
  operands[4] = GEN_INT (low);
@}")
@end smallexample

ここで述語 @code{non_add_cint_operand} は、一個の加算 insn の有効な
オペランド@emph{ではない} @code{const_int} にマッチする。
小さな変位付きの加算は、次の演算のアドレスに代入できるように
書かれる。

同じファイルから、スクラッチレジスタの使い方の例を見てみる。
この例では、レジスタと大きな定数の等値性比較を生成している。

@smallexample
(define_split
  [(set (match_operand:CC 0 "cc_reg_operand" "")
        (compare:CC (match_operand:SI 1 "gen_reg_operand" "")
                    (match_operand:SI 2 "non_short_cint_operand" "")))
   (clobber (match_operand:SI 3 "gen_reg_operand" ""))]
  "find_single_use (operands[0], insn, 0)
   && (GET_CODE (*find_single_use (operands[0], insn, 0)) == EQ
       || GET_CODE (*find_single_use (operands[0], insn, 0)) == NE)"
  [(set (match_dup 3) (xor:SI (match_dup 1) (match_dup 4)))
   (set (match_dup 0) (compare:CC (match_dup 3) (match_dup 5)))]
  "
@{
  /* @r{Get the constant we are comparing against, C, and see what it
     looks like sign-extended to 16 bits.  Then see what constant
     could be XOR'ed with C to get the sign-extended value.}  */

  int c = INTVAL (operands[2]);
  int sextc = (c << 16) >> 16;
  int xorv = c ^ sextc;

  operands[4] = GEN_INT (xorv);
  operands[5] = GEN_INT (sextc);
@}")
@end smallexample

混乱を避けるために、一個の @code{define_split} を、ある @code{define_insn}
にマッチする insn とマッチしない insn を同じように受け付けるように
書いてはならない。代わりに、二つの @code{define_split} を
別々に書いて、一つを有効な insn 用とし他方を有効でない insn 用とすること。

@end ifset
@ifset INTERNALS
@node Peephole Definitions
@section Machine-Specific Peephole Optimizers
@cindex peephole optimizer definitions
@cindex defining peephole optimizers

命令パターンに加えて、ファイル @file{md} には、
機種固有の覗き穴最適化の定義を書いても良い。

組合せフェーズが、特定の覗き穴最適化に気付かないときがある。
それはどういう時かというと、プログラムのデータの流れを見ても、
その覗き穴最適化を試すべきであるということが判らない時である。
例えば、二つの連続する insn の目的が関係している場合は、
二番目の insn が最初の insn で計算したレジスタを使わないように
見える場合でも、組合せが行なえることがある。
機種固有の覗き穴最適化器はそのような機会を検出する。

@need 1000
A definition looks like this:

@smallexample
(define_peephole
  [@var{insn-pattern-1}
   @var{insn-pattern-2}
   @dots{}]
  "@var{condition}"
  "@var{template}"
  "@var{optional-insn-attributes}")
@end smallexample

@noindent
最後の文字列オペランドは、マシン記述で機種固有の情報をなんら使っていない
のなら、省略可能である。省略しない場合は、@code{define_insn} と
同じ規則に従わなければならない。

このスケルトンでは、@var{insn-pattern-1} 等は連続する insn のマッチすべき
パターンである。@var{insn-pattern-1} が insn 列の先頭のものに、
@var{insn-pattern-2} がその次に、という具合にマッチするなら、
その insn 列に最適化が適用される。

覗き穴によりマッチする各 insn は @code{define_insn} にもマッチしなければ
ならない。覗き穴はコード生成の直前の最終段階でしか検査されない。
このため、覗き穴にはマッチするものの @code{define_insn} にはマッチしない
insn は、最適化を行なわないコンパイルの場合のコード生成で、あるいは
色々な最適化の段階で、異常終了を引き起こす。

insn のオペランドは、通常同様、@code{match_operands} や
 @code{match_operator}、@code{match_dup} にマッチする。
通常と違うのは、オペランド番号が定義の中にある全ての insn パターンに
適用されるという点である。このため、二つの insn にある同じオペランドを
検査するのに、片方の insn では @code{match_operand} を、もう一方では
@code{match_dup} を使うことができる。

@code{match_operand} パターンで使われるオペランド制約は、
覗き穴が適用されるかどうかについては、なんら直接的な効果は持たない。
だが、後で検証されるので、この制約は、覗き穴がマッチするときは
いつでも適用できるぐらい一般的なものになっていることを確認して欲しい。
覗き穴にはマッチするが、制約が満たされない場合は、コンパイラが落ちるだろう。

覗き穴最適化の場合は、全てのオペランドの制約を省略しても安全である。
あるいは、制約を書いて、既にテスト済みの規準を二重に検査することにしても
良い。

ある insn の列がそのパターンに一度一致すると、@var{condition} が
検査される。@var{condition} は一個の C の式であり、この最適化を
実行するかどうかを最終的に決定する(この式がゼロでなければ最適化を
行なう)。@var{condition} が指定されていないと(言い換えると、文字列が
空の場合)、この最適化はそのパターンに一致する、あらゆる insn の列に
適用される。

定義された覗き穴最適化はレジスタ割当が完了した後に適用される。
このため、このため、覗き穴最適化の定義では、どのオペランドが最終的に
どの種類のレジスタに割り当てられたかを、単にそのオペランドを見ることで
調べることができる。

@findex prev_active_insn
@var{condition} でオペランドを参照するには、オペランド番号が @var{i}
なら @code{operands[@var{i}]} と書く(@code{(match_operand @var{i} @dots{})}
によりマッチする)。マッチしつつある insn 群の最後のものを参照するには
変数 @code{insn} を使う。先行する insn 群を見つけるには
@code{prev_active_insn} を使う。

@findex dead_or_set_p
中間結果の計算を最適化するときは、@var{condition} を使って、
その中間結果が他の場所で使われない時にのみ一致させることができる。
C の式 @code{dead_or_set_p (@var{insn}, @var{op})} を使うこと。
ここで、@var{insn} は、最後に使われると想定している値が入っている insn
である(@code{insn} の値から、@code{prev_nonnote_insn} を組み合わせて
得られる)。@var{op} は、中間結果である(@code{operands[@var{i}]} から
得られる)。@refill

最適化を適用するということは、insn 列を一個の新たな insn で
置き換えるということを意味する。@var{template} が、この組み合わされた
insn のアセンブラコードの最終的な出力を制御する。
@var{template} は、@code{define_insn} のテンプレートと全く同じように
動作する。このテンプレートのオペランド番号は、元の insn 列とマッチするのに
使われたのと同じ番号である。

定義した覗き穴最適化の結果は、マシン記述の insn パターンのどれにも
マッチする必要はない。実は一致する機会すらないのである。
覗き穴最適化の定義は、それ自身が insn がどのように出力されるかを
制御する insn のパターンとして働く。

定義された覗き穴最適化はアセンブラコードが出力されるときに
実行されるので、生成される insn はどんな方法でも組み合わされたり、
並べ替えられたりすることはない。

以下の例は、68000 のマシン記述から取ったものである。

@smallexample
(define_peephole
  [(set (reg:SI 15) (plus:SI (reg:SI 15) (const_int 4)))
   (set (match_operand:DF 0 "register_operand" "=f")
        (match_operand:DF 1 "register_operand" "ad"))]
  "FP_REG_P (operands[0]) && ! FP_REG_P (operands[1])"
  "*
@{
  rtx xoperands[2];
  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);
#ifdef MOTOROLA
  output_asm_insn (\"move.l %1,(sp)\", xoperands);
  output_asm_insn (\"move.l %1,-(sp)\", operands);
  return \"fmove.d (sp)+,%0\";
#else
  output_asm_insn (\"movel %1,sp@@\", xoperands);
  output_asm_insn (\"movel %1,sp@@-\", operands);
  return \"fmoved sp@@+,%0\";
#endif
@}
")
@end smallexample

@need 1000
この最適化により

@smallexample
@group
jbsr _foobar
addql #4,sp
movel d1,sp@@-
movel d0,sp@@-
fmoved sp@@+,fp0
@end group
@end smallexample

@noindent
が、以下のようになる。

@smallexample
@group
jbsr _foobar
movel d1,sp@@
movel d0,sp@@-
fmoved sp@@+,fp0
@end group
@end smallexample

@ignore
@findex CC_REVERSED
If a peephole matches a sequence including one or more jump insns, you must
take account of the flags such as @code{CC_REVERSED} which specify that the
condition codes are represented in an unusual manner.  The compiler
automatically alters any ordinary conditional jumps which occur in such
situations, but the compiler cannot alter jumps which have been replaced by
peephole optimizations.  So it is up to you to alter the assembler code
that the peephole produces.  Supply C code to write the assembler output,
and in this C code check the condition code status flags and change the
assembler code as appropriate.
@end ignore

@var{insn-pattern-1} 等は、@emph{ほぼ} @code{define_insn} の
第二オペランドに同じである。重要な違いが一つある。
@code{define_insn} の第二オペランドは、鍵括弧で囲まれた一つ以上の
RTX からなる。普通は一つだけである。その場合、
同じ動作を @code{define_peephole} の要素として書くことができる。
しかし、@code{define_insn} に複数の動作があるときは、暗黙のうちに
@code{parallel} で囲まれる。その場合、@code{define_peephole} では、
@code{parallel} とその中に鍵括弧を明示的に書かなければならない。
こうして、ある insn パターンが

@smallexample
(define_insn "divmodsi4"
  [(set (match_operand:SI 0 "general_operand" "=d")
        (div:SI (match_operand:SI 1 "general_operand" "0")
                (match_operand:SI 2 "general_operand" "dmsK")))
   (set (match_operand:SI 3 "general_operand" "=d")
        (mod:SI (match_dup 1) (match_dup 2)))]
  "TARGET_68020"
  "divsl%.l %2,%3:%0")
@end smallexample

@noindent
のようになていたとすると、この insn を覗き穴に書くには以下のようにする。

@smallexample
(define_peephole
  [@dots{}
   (parallel
    [(set (match_operand:SI 0 "general_operand" "=d")
          (div:SI (match_operand:SI 1 "general_operand" "0")
                  (match_operand:SI 2 "general_operand" "dmsK")))
     (set (match_operand:SI 3 "general_operand" "=d")
          (mod:SI (match_dup 1) (match_dup 2)))])
   @dots{}]
  @dots{})
@end smallexample

@end ifset
@ifset INTERNALS
@node Insn Attributes
@section Instruction Attributes
@cindex insn attributes
@cindex instruction attributes

ターゲット機種でサポートされている命令の記述に加えて、
@file{md} ファイルでは、@dfn{属性} のグループとそれぞれの属性の値を
定義することも出来る。生成される各 insn には、属性毎に一つの値が
割り当てられる。取る得る属性の一つとしては、insn がその機種の条件コード
について持つ効果がある。
そして、この属性を使って @code{NOTICE_UPDATE_CC} が条件コードを
追跡することができる。

@menu
* Defining Attributes:: 属性とその値の指定方法
* Expressions::         属性値として使用可能な式
* Tagging Insns::       属性値の insn への割り当て
* Attr Example::        属性割り当ての例
* Insn Lengths::        insn の長さの計算
* Constant Attributes:: 定数である属性の定義
* Delay Slots::         遅延スロットの定義
* Function Units::      insn スケジューリングに必要な情報の指定
@end menu

@end ifset
@ifset INTERNALS
@node Defining Attributes
@subsection Defining Attributes and their Values
@cindex defining attributes and their values
@cindex attributes, defining

@findex define_attr
@code{define_attr} 式を使って、ターゲットマシンで必要とされる
各属性を定義する。以下のような形式になる。

@smallexample
(define_attr @var{name} @var{list-of-values} @var{default})
@end smallexample

@var{name} は、定義しようとしている属性の名前を指定する文字列である。

@var{list-of-values} は、属性に割り当てられる、コンマで区切った値のリスト
を指定する文字列か、その属性が数値を取ることを示すヌル文字列のどちらかである。

@var{default} は、ある属性式であり、この属性に対する明示的な値を
含まない定義を持つパターンにマッチする insn のこの属性の値を与える。
デフォルトの扱いについてのもっと詳細な情報は、@xref{Attr Example}。
特定の insn に依存しない属性についての情報は、@xref{Constant Attributes}。

@findex insn-attr.h
定義されている各属性毎に、たくさんの定義がファイル @file{insn-attr.h} に
書き込まれる。属性に対して明示的な値の組が指定されている場合は、
以下のように定義されている。

@itemize @bullet
@item
@samp{#define} が、シンボル @samp{HAVE_ATTR_@var{name}} に対して
書かれている。

@item
ある列挙型クラスが @samp{attr_@var{name}} に対して定義される。
この列挙型の要素は、@samp{@var{upper-name}_@var{upper-value}} という
形になり、属性名と属性値はまず大文字に変換される。

@item
関数 @samp{get_attr_@var{name}} が定義されており、
この関数は insn を一つ受取、その insn の属性値を返す。
@end itemize

例えば、@file{md} ファイルに以下のように書いてあったとすると、

@smallexample
(define_attr "type" "branch,fp,load,store,arith" @dots{})
@end smallexample

@noindent
ファイル @file{insn-attr.h} には以下のように出力される。

@smallexample
#define HAVE_ATTR_type
enum attr_type @{TYPE_BRANCH, TYPE_FP, TYPE_LOAD,
                 TYPE_STORE, TYPE_ARITH@};
extern enum attr_type get_attr_type ();
@end smallexample

属性が数値を取るなら、@code{enum} 型は定義されず、属性値を取得する
関数は @code{int} を返す。

@end ifset
@ifset INTERNALS
@node Expressions
@subsection Attribute Expressions
@cindex attribute expressions

属性を定義するのに使われる RTL 式は、前出のコードに加えて、
以下で議論する、属性定義に固有のコードを幾つか使っている。
属性値式は、以下の形のどれか一つでなければならない。

@table @code
@cindex @code{const_int} and attributes
@item (const_int @var{i})
整数 @var{i} が、数値属性の値を指定する。
@var{i} は非負でなければならない。

数値属性の値は、@code{const_int} か、@code{const_string} で文字列で
表現した整数、@code{eq_attr}(以下参照)、@code{attr}、
@code{symbol_ref}、単純算術式のどれかで指定することができ、
@code{set_attr} は特定の命令を上書きする(@pxref{Tagging Insns})。

@cindex @code{const_string} and attributes
@item (const_string @var{value})
文字列 @var{value} は、定数属性値を指定する。
@var{value} が @samp{"*"} として指定されると、
その属性のデフォルト値が、この式を含む insn に対して使われることを意味する。
@samp{"*"} は、明らかに、@code{define_attr} の @var{default} 式で使うことは
できない。@refill

値が指定されている属性が数値的なら、@var{value} は非負の整数
(この場合、普通 @code{const_int})を含む文字列でなければならない。
数値的でなければ、その属性に対して有効な値の一つを含んでいなければならない。

@cindex @code{if_then_else} and attributes
@item (if_then_else @var{test} @var{true-value} @var{false-value})
@var{test} は属性テストを指定する。その形式は以下で定義される。
この式の値は、@var{test} が真であれば @var{true-value} であり、
真でなければ @var{false-value} となる。

@cindex @code{cond} and attributes
@item (cond [@var{test1} @var{value1} @dots{}] @var{default})
この式の第一オペランドはあるベクトルであり、偶数個の式をもち、
@var{test} 式と @var{value} 式の対からなる。@code{cond} 式の値は
最初の真である @var{test} 式に対応する値のものである。真となる @var{test}
式がない場合は、@code{cond} 式の値は @var{default} 式の値である。
@end table

@var{test} 式は、以下の形のうちの一つを取る。

@table @code
@cindex @code{const_int} and attribute tests
@item (const_int @var{i})
このテストは、@var{i} がゼロでなければ真になり、さもなければ
偽になる。

@cindex @code{not} and attributes
@cindex @code{ior} and attributes
@cindex @code{and} and attributes
@item (not @var{test})
@itemx (ior @var{test1} @var{test2})
@itemx (and @var{test1} @var{test2})
これらのテストは、指定された論理関数が真になれば、真である。

@cindex @code{match_operand} and attributes
@item (match_operand:@var{m} @var{n} @var{pred} @var{constraints})
このテストは、属性値が決定されようとしている insn のオペランド
@var{n} のモードが @var{m} であり(テストのこの部分は、@var{m} が
@code{VOIDmode} なら無視される)、かつ文字列 @var{pred} で指定される
関数が、オペランド @var{n} とモード @var{m} を渡したときに
ゼロでない値を返したときに、真になる(テストのこの部分は、
@var{pred} がヌル文字列なら無視される)。

オペランド @var{constraints} は無視されるので、ヌル文字列とすべきである。

@cindex @code{le} and attributes
@cindex @code{leu} and attributes
@cindex @code{lt} and attributes
@cindex @code{gt} and attributes
@cindex @code{gtu} and attributes
@cindex @code{ge} and attributes
@cindex @code{geu} and attributes
@cindex @code{ne} and attributes
@cindex @code{eq} and attributes
@cindex @code{plus} and attributes
@cindex @code{minus} and attributes
@cindex @code{mult} and attributes
@cindex @code{div} and attributes
@cindex @code{mod} and attributes
@cindex @code{abs} and attributes
@cindex @code{neg} and attributes
@cindex @code{ashift} and attributes
@cindex @code{lshiftrt} and attributes
@cindex @code{ashiftrt} and attributes
@item (le @var{arith1} @var{arith2})
@itemx (leu @var{arith1} @var{arith2})
@itemx (lt @var{arith1} @var{arith2})
@itemx (ltu @var{arith1} @var{arith2})
@itemx (gt @var{arith1} @var{arith2})
@itemx (gtu @var{arith1} @var{arith2})
@itemx (ge @var{arith1} @var{arith2})
@itemx (geu @var{arith1} @var{arith2})
@itemx (ne @var{arith1} @var{arith2})
@itemx (eq @var{arith1} @var{arith2})
これらのテストは、二つの算術式について指定された比較の結果が真になれば、
真となる。算術式は、
@code{plus}、@code{minus}、@code{mult}、@code{div}、@code{mod}、
@code{abs}、@code{neg}、@code{and}、@code{ior}、@code{xor}、@code{not}、
@code{ashift}、@code{lshiftrt}、@code{ashiftrt} といった式から
構成される。@refill

@findex get_attr
@code{const_int} と @code{symbol_ref} は常に有効な項である
(追加の形式については @pxref{Insn Lengths})。
@code{symbol_ref} は一個の文字列であり、一個の C の式を示す。
この式は、@samp{get_attr_@dots{}} ルーチン
で評価されたときに @code{int} を生じる。普通はグローバル変数に
ならないといけない。@refill

@findex eq_attr
@item (eq_attr @var{name} @var{value})
@var{name} は、属性名を指定する文字列である。

@var{value} は文字列であり、属性 @var{name} の有効な値であるか、
幾つかの値をカンマで区切ったリストか、あるいは @samp{!} の後に
一個の値か値のリストを続けたものである。
@var{value} が @samp{!} で始まっていなければ、このテストは、現在の insn の
属性 @var{name} の値が @var{value} で指定されたリストの中に
入っていれば、真となる。@var{value} が @samp{!} で始まっていると、
このテストは属性値が指定されたリストに入って@emph{いない}時に真となる。

例えば

@smallexample
(eq_attr "type" "load,store")
@end smallexample

@noindent
は、次の式に等価である。

@smallexample
(ior (eq_attr "type" "load") (eq_attr "type" "store"))
@end smallexample

@var{name} が @samp{alternative} の属性を指定するものなら、それは
GNU CC の変数 @code{which_alternative} の値を参照し
(@pxref{Output Statement})、その値は小さな整数でなくてはならない。
例えば、@refill

@smallexample
(eq_attr "alternative" "2,3")
@end smallexample

@noindent
は、次の式に等価である。

@smallexample
(ior (eq (symbol_ref "which_alternative") (const_int 2))
     (eq (symbol_ref "which_alternative") (const_int 3)))
@end smallexample

ほとんどの属性に対して、テスト @code{eq_attr} は、
テストされる属性の値が、ある特定のパターンにマッチする全ての insn に
対して知られているなら、簡略化される。これは非常に良くあるケースである。@refill

@findex attr_flag
@item (attr_flag @var{name})
@code{attr_flag} 式の値は、@var{name} で指定されたフラグが
現在スケジューリング中の @code{insn} に対して真になるなら、真となる。

@var{name} はある文字列であり、テストすべきフラグの固定したセットを
一つ指定する。フラグ @code{forward} と @code{backward} を
テストして、条件分岐の方向を決定する。フラグ @code{very_likery}、
@code{likely}、@code{very_unlikely}、@code{unlikely} をテストして、
条件分岐が成立すると予想されるかどうかを決定する。

フラグ @code{very_likely} が真なら、フラグ @code{likely} もまた
真になる。@code{very_unlikely} と @code{unlikely} についても同様である。

この例では、条件分岐の遅延スロットを記述している。
このスロットは、分岐が成立する前方への分岐(真の無効化)か
分岐が成立しない場合の後方への分岐(偽の無効化)が無効化される。


@smallexample
(define_delay (eq_attr "type" "cbranch")
  [(eq_attr "in_branch_delay" "true")
   (and (eq_attr "in_branch_delay" "true")
        (attr_flag "forward"))
   (and (eq_attr "in_branch_delay" "true")
        (attr_flag "backward"))])
@end smallexample

フラグ @code{forward} と @code{backward} は、現在スケジュールされつつある
@code{insn} が条件分岐でなければ、偽になる。

フラグ @code{very_likely} と @code{likely} は、スケジュールされつつある
@code{insn} が条件分岐でなければ、真になる。
フラグ @code{very_unlikely} と @code{unlikely} は、スケジュールされつつある
@code{insn} が条件分岐でなければ、偽になる。

@code{attr_flag} は、遅延スロットスケジューリングの間でだけ使われ、
他のパスには何の意味も持たない。

@findex attr
@item (attr @var{name})
別の属性の値を返す。数値属性に対して最も役に立つが、
同様に、非数値属性にたいしても @code{eq_attr} と @code{attr_flag} が
より効率の良いコードを生成する助けとなる。
@end table

@end ifset
@ifset INTERNALS
@node Tagging Insns
@subsection Assigning Attribute Values to Insns
@cindex tagging insns
@cindex assigning attribute values to insns

ある insn のある属性に割り当てられる値は、主に、その insn により照合される
(あるいは @code{define_peephole} が生成する)パターンにより決定される。
各 @code{define_insn} と @code{define_peephole} は、オプションの最後の
引数を持つことができ、一致する insn の属性値を指定することができる。
ある特定の insn において指定されていない属性値は全て、その属性の
デフォルト値に設定される。このデフォルト値は、その属性の @code{define_attr} で
指定される。属性のデフォルト値を多用すると、ほとんどの insn パターンの
定義で一つか二つの属性値を指定するだけで済む。次の節の例を参照のこと。

@code{define_insn} と @code{define_peephole} の最後のオプションの引数は、
式のベクトルであり、それぞれの式がある一個の属性の値を定義する。
属性値を割り当てる最も一般的な方法は、@code{set} 式を使い、その第一
オペランドを設定する属性名を与える @code{attr} 式とすることである。
この @code{set} 式の第二のオペランドは属性式(@pxref{Expressions})であり、
属性の値を与える。@refill

属性値が属性 @samp{alternaitve} に依存するとき(すなわち、それが、
その insn の制約にある利用可能な選択肢である)は、
@code{set_attr_alternative} 式を使うことができる。
これは属性式のベクトルを指定することを許す。ベクトルの中の
それぞれの式が各属性を表す。

@findex set_attr
任意の属性式ほど一般的な機能が必要ない場合、もっと簡単な 
@code{set_attr} 式を使うことができる。この式を使うと、
一個の文字列を指定することで、一個の属性値か、あるいは各選択肢毎に
一個の属性値を与えるリストを表すことができる。

上記の指定方法をそれぞれ以下に示す。
どちらの場合も、@var{name} は、設定すべき属性を指定する文字列である。

@table @code
@item (set_attr @var{name} @var{value-string})
@var{value-string} は、希望の属性値を与える文字列か、あるいは
一連の属性値をカンマで区切ったリストを表す文字列である。
この要素数は、insn パターンの制約の選択肢数と一致しなければならない。

選択肢のどれかに @samp{*} を指定することができる。
その場合、属性値は、その選択肢にマッチする insn のデフォルト値になる。

@findex set_attr_alternative
@item (set_attr_alternative @var{name} [@var{value1} @var{value2} @dots{}])
insn の選択肢により、この値は指定された値のうちの一つになる。
これは、属性 @samp{alternative} の @code{cond} を使ってのテストの
省略形である。

@findex attr
@item (set (attr @var{name}) @var{value})
この @code{set} の第一オペランドは、特別な RTL 式 である @code{attr} 式で
なければならない。この式の唯一のオペランドは、設定する属性の名前を
指定する文字列である。@var{value} は、その属性の値である。
@end table

以下に同じ属性値の指定を表す、三つの異なる方法を示す。

@smallexample
(set_attr "type" "load,store,arith")

(set_attr_alternative "type"
                      [(const_string "load") (const_string "store")
                       (const_string "arith")])

(set (attr "type")
     (cond [(eq_attr "alternative" "1") (const_string "load")
            (eq_attr "alternative" "2") (const_string "store")]
           (const_string "arith")))
@end smallexample

@need 1000
@findex define_asm_attributes
@code{define_asm_attributes} 式は、@code{asm} 文から生成された
insn に割り当てられた属性を指定する方法を提供する。
次の形を取る。

@smallexample
(define_asm_attributes [@var{attr-sets}])
@end smallexample

@noindent
ここで、@var{atr-sets} は、@code{define_insn} や @code{define_peephole} 式
両方に指定するのと同じものである。

これらの値は、普通はその属性値の「最悪の場合」になる。
例えば、条件コードが破壊されることを示したりする。

@code{length} 属性の指定は特別に扱われる。
一個の @code{asm} insn の長さを計算するには、
式 @code{define_asm_attributes} で指定された長さに、
@code{asm} 文に指定されている機械命令の数を掛けたものになる。
@code{asm} 文中の機械命令数は、命令文字列中のセミコロンと改行の
数で決まる。このため、@code{define_asm_attributes} で指定される
@code{length} 属性の値は、一個の機械命令の可能な最大長にしなくては
ならない

@end ifset
@ifset INTERNALS
@node Attr Example
@subsection Example of Attribute Specifications
@cindex attribute specifications example
@cindex attribute specifications

デフォルトをうまく使うのが、insn の属性を効率良く使うには重要である。
通常、insn は @dfn{types} と、@code{type} と呼ばれている属性に分けられる。
@code{type} は、このデフォルト値を表すのに使われる。
この属性は、普通は他の属性のデフォルト値を定義するのにしか使われない。
例を使ってこの属性の使い方を説明する。

ある RISC マシンを考えよう。このマシンには条件コードがあり、
レジスタで実行されるのは全語の演算だけである。
全ての命令をロード、ストア、(整数)算術演算、浮動小数点演算、分岐に
分割できるとしよう。

ここでは、ある insn の条件コードに対する効果を決定することに
注意を集中することにし、さらに可能な効果として次のものに限定する。
条件コードは、予測できない形で設定され得る(破壊される)、
変更されない、演算結果に一致するように設定される、
以前に条件コードに設定した項目が修正されたときにのみ
変更される。

そういう機種用の @file{md} ファイルの例の一部を示す

@smallexample
(define_attr "type" "load,store,arith,fp,branch" (const_string "arith"))

(define_attr "cc" "clobber,unchanged,set,change0"
             (cond [(eq_attr "type" "load")
                        (const_string "change0")
                    (eq_attr "type" "store,branch")
                        (const_string "unchanged")
                    (eq_attr "type" "arith")
                        (if_then_else (match_operand:SI 0 "" "")
                                      (const_string "set")
                                      (const_string "clobber"))]
                   (const_string "clobber")))

(define_insn ""
  [(set (match_operand:SI 0 "general_operand" "=r,r,m")
        (match_operand:SI 1 "general_operand" "r,m,r"))]
  ""
  "@@
   move %0,%1
   load %0,%1
   store %0,%1"
  [(set_attr "type" "arith,load,store")])
@end smallexample

上の例で我々は、マシンワードより小さな量について算術演算を実行すると、
それにより条件コードに全ワードの結果に対応する値を設定するので、
条件コードが破壊されると仮定していることに注意。

@end ifset
@ifset INTERNALS
@node Insn Lengths
@subsection Computing the Length of an Insn
@cindex insn lengths, computing
@cindex computing the length of an insn

多くの機種では、複数のタイプの分岐命令が提供されており、
それぞれ分岐の変位の長さが異なる。
大部分の場合は、アセンブラが正しい命令を選ぶ。
だが、アセンブラが不可能な場合は、特別な属性、@samp{length} 属性が
定義されているときは GCC が行なうことができる。
この属性は、@code{define_attr} でヌル文字列を指定することで
数値を持つように定義しなければならない。

@samp{length} 属性の場合は、さらに算術項の二つの形式があり、
テスト式で使うことができる。

@table @code
@cindex @code{match_dup} and attributes
@item (match_dup @var{n})
これは、現在の insn のオペランド @var{n} のアドレスを参照している。
このアドレスは @code{label_ref} でなければならない。

@cindex @code{pc} and attributes
@item (pc)
@emph{現在の} insn のアドレスを参照する。
これを@emph{次の} insn のアドレスとする使い方の方がより一貫性が
保てるのだろうが、そうすると現在の insn の長さを計算するときに
混乱する可能性がある。
@end table

@cindex @code{addr_vec}, length of
@cindex @code{addr_diff_vec}, length of
通常の insn については、長さは @samp{length} 属性の値により
決まる。@code{addr_vec} と @code{addr_diff_vec} の insn パターンの
場合は、長さはベクトル数に各ベクトルの大きさを掛けたものとして
計算される。

長さは、アドレス可能な記憶域の単位(バイト)で測る。

以下のマクロを使って長さの計算を洗練されたものにすることができる。

@table @code
@findex FIRST_INSN_ADDRESS
@item FIRST_INSN_ADDRESS
insn の @code{length} 属性が使われているとき、このマクロは
ある関数の先頭の insn のアドレスに代入されるべき値を指定する。
これが指定されていないと、0 が使われる。

@findex ADJUST_INSN_LENGTH
@item ADJUST_INSN_LENGTH (@var{insn}, @var{length})
定義されていると、命令 @var{insn} に、それが使われている文脈の
関数として割り当てられている長さを修正する。
@var{length} は左辺値であり、最初に計算した insn の長さが入っている。
これは、その insn の正しい長さに更新する必要がある。

このマクロは通常は必要とされない。
必要となる場合の一つは、ROMP である。
この機種では、@code{addr_vec} insn の大きさは、アラインメントが
必要とされるかも知れないという事実を補償するために、2 づつ増加しなければ
ならない。
@end table

@findex get_attr_length
@code{get_attr_length}(@code{length} 属性の値)を返すルーチンを
出力ルーチンの中で使うと、以下の例が示すように、
書き出すべき分岐命令の形を決めることができる。

可変長分岐の指定の例として、IBM 360 を考える。
あるレジスタに、ある関数の開始アドレスが設定されるという規約を採用したと
すると、その開始点から 4k バイト以内のラベルには一個の 4 バイト命令で
ジャンプすることが出来る。それ以外の場合は、6バイトの命令列を使って、
メモリからアドレスをロードし、次にそのアドレスに分岐する必要がある。

こういう機種では、分岐命令のパターンは以下のような指定になる。

@smallexample
(define_insn "jump"
  [(set (pc)
        (label_ref (match_operand 0 "" "")))]
  ""
  "*
@{
   return (get_attr_length (insn) == 4
           ? \"b %l0\" : \"l r15,=a(%l0); br r15\");
@}"
  [(set (attr "length") (if_then_else (lt (match_dup 0) (const_int 4096))
                                      (const_int 4)
                                      (const_int 6)))])
@end smallexample

@end ifset
@ifset INTERNALS
@node Constant Attributes
@subsection Constant Attributes
@cindex constant attributes

@code{define_attr} の特別な形式、つまり、デフォルト値の式が @code{const} 式
の場合、ある特定のコンパイラの実行については定数である属性を示す。
定数属性は、どの種類のプロセッサが使われるかを指定するのに使われる。
例えば、以下のようになる。

@smallexample
(define_attr "cpu" "m88100,m88110,m88000"
 (const
  (cond [(symbol_ref "TARGET_88100") (const_string "m88100")
         (symbol_ref "TARGET_88110") (const_string "m88110")]
        (const_string "m88000"))))

(define_attr "memory" "fast,slow"
 (const
  (if_then_else (symbol_ref "TARGET_FAST_MEM")
                (const_string "fast")
                (const_string "slow"))))
@end smallexample

定数属性用に生成されたルーチンには、どの特定の insn にも依存しないので、
パラメータはない。定数属性の値を定義するのに使われる RTL 式は、
@code{symbol_ref} 形式を使っても良いが、insn の属性を含む、
@code{match_operand} 形式や @code{eq_attr} 形式は使ってならない。

@end ifset
@ifset INTERNALS
@node Delay Slots
@subsection Delay Slot Scheduling
@cindex delay slots, defining

insn の属性の機構を使うと、ターゲットマシンに遅延スロットがもしあれば、
遅延スロットを必要であると指定することができる。
ある命令は、物理的にその直後に置かれている命令群が、その命令の前に
置かれているかのように実行されるとき、@dfn{遅延スロット}を必要とする
と言われる。
古典的な例では、分岐命令と呼び出し命令が該当し、
分岐や呼び出しが実行される前に後続の命令を実行することがある。

機種によっては、条件分岐命令が、遅延スロットに置かれている
命令を選択的に@dfn{無効化}することができる。
これは、遅延スロットにある命令が、分岐の結果によっては実行されないという
ことを意味する。
分岐が真のときに無効化を行なう命令と分岐が偽の時に無効化を行なう命令の
両方がサポートされている。

遅延スロット空けジューリングが命令スケジューリングと異なるのは、
ある命令が遅延スロットを必要とするかどうかを決めるには、生成される
命令の型にだけ依存し、命令間のデータ流には依存しないという点にある。
データ依存の命令スケジューリングに関する議論については次の節を
参照のこと。

@findex define_delay
ある insn が一個以上の遅延スロットを必要とするという要件は、
@code{define_delay} 式により指示される。
@code{define_delay} 式は以下の形式を取る。

@smallexample
(define_delay @var{test}
              [@var{delay-1} @var{annul-true-1} @var{annul-false-1}
               @var{delay-2} @var{annul-true-2} @var{annul-false-2}
               @dots{}])
@end smallexample

@var{test} は、属性のテストであり、この @code{define_delay} がある特定の
insn に適用されるかどうかを指示する。
もし適用されるのであれば、必要な遅延スロットの数が
二番目の引数として指定されるベクターの長さにより決定される。
遅延スロット @var{n} に置かれている insn は、属性テスト @var{delay-n} を
満足しなければならない。@var{annul-true-n} は属性テストであり、
分岐が真の時にどの insn が無効化されるかを指定する。
同様に、@var{annul-false-n} は分岐が偽の時に、
遅延スロットにあるうちのどの insn が無効化されるかを指定する。
遅延スロットの無効化がサポートされていないなら、@code{(nil)} を
指定すること。@refill

例えば、良くある場合として分岐 insn と呼び出し insn が一個の遅延スロット
を必要とし、そのスロットには分岐あるいは呼び出し以外の任意の insn を
置くことができる場合、以下のコードを @file{md} ファイルに置くことになる。

@smallexample
(define_delay (eq_attr "type" "branch,call")
              [(eq_attr "type" "!branch,call") (nil) (nil)])
@end smallexample

@code{define_delay} 式は複数指定することができる。
その場合、各 @code{define_delay} 式は、別々の遅延スロット要件を
指定し、二つの @code{define_delay} 式のテストで両方真になる insn が
あってはならない。

例えば、分岐には一個の遅延スロットを必要とするが、呼び出しには二つ
の遅延スロットが必要で、遅延スロットには分岐 insn も呼び出し insn も
置くことができず、分岐用の遅延スロットに有効な任意の insn が
分岐が真の場合には無効化可能であるという機種では、以下のように表現する。

@smallexample
(define_delay (eq_attr "type" "branch")
   [(eq_attr "type" "!branch,call")
    (eq_attr "type" "!branch,call")
    (nil)])

(define_delay (eq_attr "type" "call")
              [(eq_attr "type" "!branch,call") (nil) (nil)
               (eq_attr "type" "!branch,call") (nil) (nil)])
@end smallexample
@c the above is *still* too long.  --mew 4feb93

@end ifset

@node Function Units,  , Delay Slots, Insn Attributes
@subsection Specifying Function Units
@cindex function units, for scheduling

多くの RISC マシンでは、特定のサイクル数またないとその結果が得られない
ような命令が存在する。良く見られるのは、メモリからデータをロード
する命令である。多くのマシンでは、ロード命令の後、あまり早くロード
されるデータを参照すると、パイプラインがストールする。

さらに、最近の多くのマイクロプロセッサは、複数の機能ユニット、普通は
一個の整数向けのユニットと一個の浮動小数点ユニットを持っており、
そのため、必要とされる結果が用意できていないときに良くパイプラインが
ストールする。

この節では、ある命令の実行から、その結果が使えるようになるまでにどれだけの
時間が経過する必要があるかを指定する方法を説明する。
また、ある命令の実行することにより、機能ユニットの競合にのために、
同種の命令の実行を遅らせることがあるのはどういう場合かを指定する方法に
ついても説明する。

この節で説明する指定方法のために、マシンを機能ユニットに分割し、
各機能ユニットは特定の種類の命令を first-in-first-out 順に
実行するものとする。
各サイクル毎に一つの命令を受付、続く命令でその結果が利用できる
(フォワーディングによることが多い)機能ユニットについては、
指定を行う必要がない。
古典的な RISC マイクロプロセッサは、通常機能ユニットは一つしかなく、
それを@samp{メモリ} と呼ぶことが出来る。最近のスーパースカラ・プロセッサ
は、浮動小数点演算用の機能ユニットを複数持つことが多い。少なくとも、
一個の浮動小数点加算器と乗算器を持つのが普通である。

@findex define_function_unit
ある insn のクラスによるある機能ユニットの使用方法は、
@code{define_function_unit} 式で指定される。それは以下のようになる。

@smallexample
(define_function_unit @var{name} @var{multiplicity} @var{simultaneity}
                      @var{test} @var{ready-delay} @var{issue-delay}
                     [@var{conflict-list}])
@end smallexample

@var{name} は、機能ユニット名を指定する文字列である。

@var{multiplicity} は整数であり、プロセッサの持つ同等のユニット数を
指定する。二個以上のユニットが指定された場合は、各ユニットは
独立にスケジュールされる。
本当に独立なユニット数を指定すべきである。パイプライン化されたユニットは
一個のユニットとして指定すべきである。(一個の命令クラスに対し
複数の機能ユニットがあり、それらが真に独立しており、パイプライン化
されていない機種の良く知られている例としては、CDC 6600 の二つの
乗算ユニットと二つの増分ユニットがあるのみである。)

@var{simultaneity} は、各機能ユニットの実態で同時に実行できる命令の
最大数か、機能ユニットがパイプライン化されていて制限がないのであれば
ゼロを指定する。

機能ユニット @var{name} を参照している、全ての
 @code{define_function_unit} の定義は、@var{multiplicity} と
@var{simultaneity} について同じ名前と値を持たなければならない。

@var{test} は属性テストであり、この定義において記述しようとしている
insn を選択する。一個の insn は、複数の機能ユニットを使っても良く、
一個の機能ユニットは複数の @code{define_function_unit} で指定されて
いても良いということに注意して欲しい。

@var{ready-delay} はある整数であり、ストールなしで命令の結果が
使えるようになるまでのサイクル数を指定する。

@var{issue-delay} はある整数であり、@var{test} 式に一致した命令が
この機能ユニットを使い始めてから、後続の命令が使い始められるまでの
サイクル数を指定する。コストが @var{N} だと @var{N-1} サイクルの遅延を
表す。後続の命令は、以前の命令がより大きな値の @var{ready-delay} を
持っている場合にも遅延する可能性がある。このブロックの効果は、
@var{simultaneity}、@var{ready-delay}、@var{issue-delay}、
@var{conflict-list} といった項から計算される。
普通のパイプライン化されていない機能ユニットについては、
@var{simultaneity} は 1 であり、このユニットは、実行している命令の
@var{ready-delay} サイクルの間ブロックされる。より小さな値の
@var{issue-delay} は無視される。

@var{conflict-list} はオプションのリストであり、この機能ユニットの
衝突の詳細なコストを与える。指定されていると、条件のテスト式の
リストになっており、その式は、@var{name} で実行されるように選ばれた
insn に適用される。その insn の後に、既に @var{name} で実行中の
@var{test} にマッチする特定の insn が続く。
リストのそれぞれの insn に対し、@var{issue-delay} が
衝突のコストを指定する。リストに無い insn については、コストはゼロである。
指定されていない場合は、@var{conflict-list} は、
機能ユニットを使う全ての命令がデフォルトになる。

このベクトルが使われる典型的な場合としては、
浮動小数点機能ユニットが単精度演算か倍精度演算のどちらかは
パイプライン化できるが両方は出来ない場合や、メモリユニットが
ロード命令はパイプライン化できるがストア命令はできない場合等がある。

例として古典的な RISC マシンを考えてみよう。ロード命令の結果は
二サイクルの間利用できず(一個の「遅延」命令が必要)、ロード命令は
同時には一個しか実行できないとする。これは以下のように指定できる。

@smallexample
(define_function_unit "memory" 1 1 (eq_attr "type" "load") 2 0)
@end smallexample

浮動小数点機能ユニットが単精度か倍精度のどちらかはパイプライン処理できるが、
両方はできないという場合、以下のように指定することができる。

@smallexample
(define_function_unit
   "fp" 1 0 (eq_attr "type" "sp_fp") 4 4 [(eq_attr "type" "dp_fp")])
(define_function_unit
   "fp" 1 0 (eq_attr "type" "dp_fp") 4 4 [(eq_attr "type" "sp_fp")])
@end smallexample

@strong{注意:} スケジューラは、機能ユニットの衝突を避け、
@code{define_function_unit} の全ての指定を使おうとする。
我々は最近、これらの指定では、
複数のパイプラインユニットを使う命令を持つ、いくつかの新しめの
「スーパスカラ」プロセッサをモデル化できないということに気が付いた。
これらの命令は、第二の機能ユニットがそれらの命令を実行するのに使われている
間に潜在的な衝突を起こす可能性があり、その衝突を表現する方法がないのである。
このようなプロセッサの機能ユニットの衝突の仕組みの例や、その表現方法に
ついて提案があれば、知らせて欲しい。

